
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.3.1
 * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
 */
Prisma.prismaVersion = {
  client: "4.3.1",
  engine: "c875e43600dfe042452e0b868f7a48b817b9640b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AnketaScalarFieldEnum = makeEnum({
  id: 'id',
  birthDay: 'birthDay',
  address: 'address',
  education: 'education',
  specialty: 'specialty',
  workStudy: 'workStudy'
});

exports.Prisma.BookGenreScalarFieldEnum = makeEnum({
  id: 'id',
  bookId: 'bookId',
  genreId: 'genreId'
});

exports.Prisma.BookScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  author: 'author',
  isbn: 'isbn',
  description: 'description',
  count: 'count',
  rating: 'rating',
  price: 'price',
  publishing_date: 'publishing_date',
  topic: 'topic'
});

exports.Prisma.BookingScalarFieldEnum = makeEnum({
  id: 'id',
  received_date: 'received_date',
  expiration_date: 'expiration_date',
  return_date: 'return_date',
  userId: 'userId',
  bookId: 'bookId',
  isExtend: 'isExtend',
  isExtendApproved: 'isExtendApproved'
});

exports.Prisma.CommentScalarFieldEnum = makeEnum({
  id: 'id',
  message: 'message',
  userId: 'userId',
  newsId: 'newsId'
});

exports.Prisma.GenreScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.ImageModelScalarFieldEnum = makeEnum({
  id: 'id',
  link: 'link',
  bookId: 'bookId',
  newsId: 'newsId'
});

exports.Prisma.NewsScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  short_title: 'short_title',
  description: 'description',
  created_at: 'created_at',
  update_at: 'update_at'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.ResponseScalarFieldEnum = makeEnum({
  id: 'id',
  bookId: 'bookId',
  userId: 'userId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  fatherName: 'fatherName',
  phoneNumber: 'phoneNumber',
  password: 'password',
  role: 'role',
  avatar: 'avatar',
  IIN: 'IIN',
  anketaId: 'anketaId'
});
exports.Role = makeEnum({
  USER: 'USER',
  ADMIN: 'ADMIN',
  OPERATOR: 'OPERATOR',
  MODERATOR: 'MODERATOR'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Anketa: 'Anketa',
  ImageModel: 'ImageModel',
  Book: 'Book',
  BookGenre: 'BookGenre',
  Genre: 'Genre',
  News: 'News',
  Comment: 'Comment',
  Response: 'Response',
  Booking: 'Booking'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
