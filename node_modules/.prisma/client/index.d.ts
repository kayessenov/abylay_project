
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: bigint
  firstName: string
  lastName: string
  fatherName: string | null
  phoneNumber: string
  password: string
  role: Role
  avatar: string | null
  IIN: string
  anketaId: bigint | null
}

/**
 * Model Anketa
 * 
 */
export type Anketa = {
  id: bigint
  birthDay: Date
  address: string
  education: string
  specialty: string
  workStudy: string
}

/**
 * Model ImageModel
 * 
 */
export type ImageModel = {
  id: bigint
  link: string
  bookId: bigint | null
  newsId: bigint | null
}

/**
 * Model Book
 * 
 */
export type Book = {
  id: bigint
  title: string
  author: string
  isbn: string
  description: string
  count: number
  rating: number
  price: number
  publishing_date: Date
  topic: string
}

/**
 * Model BookGenre
 * 
 */
export type BookGenre = {
  id: bigint
  bookId: bigint
  genreId: bigint
}

/**
 * Model Genre
 * 
 */
export type Genre = {
  id: bigint
  name: string
}

/**
 * Model News
 * 
 */
export type News = {
  id: bigint
  title: string
  short_title: string
  description: string
  created_at: Date
  update_at: Date
}

/**
 * Model Comment
 * 
 */
export type Comment = {
  id: bigint
  message: string
  userId: bigint
  newsId: bigint
}

/**
 * Model Response
 * 
 */
export type Response = {
  id: bigint
  bookId: bigint
  userId: bigint
}

/**
 * Model Booking
 * 
 */
export type Booking = {
  id: bigint
  received_date: Date
  expiration_date: Date
  return_date: Date
  userId: bigint
  bookId: bigint
  isExtend: boolean
  isExtendApproved: boolean
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  OPERATOR: 'OPERATOR',
  MODERATOR: 'MODERATOR'
};

export type Role = (typeof Role)[keyof typeof Role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.anketa`: Exposes CRUD operations for the **Anketa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Anketas
    * const anketas = await prisma.anketa.findMany()
    * ```
    */
  get anketa(): Prisma.AnketaDelegate<GlobalReject>;

  /**
   * `prisma.imageModel`: Exposes CRUD operations for the **ImageModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ImageModels
    * const imageModels = await prisma.imageModel.findMany()
    * ```
    */
  get imageModel(): Prisma.ImageModelDelegate<GlobalReject>;

  /**
   * `prisma.book`: Exposes CRUD operations for the **Book** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.book.findMany()
    * ```
    */
  get book(): Prisma.BookDelegate<GlobalReject>;

  /**
   * `prisma.bookGenre`: Exposes CRUD operations for the **BookGenre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookGenres
    * const bookGenres = await prisma.bookGenre.findMany()
    * ```
    */
  get bookGenre(): Prisma.BookGenreDelegate<GlobalReject>;

  /**
   * `prisma.genre`: Exposes CRUD operations for the **Genre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genres
    * const genres = await prisma.genre.findMany()
    * ```
    */
  get genre(): Prisma.GenreDelegate<GlobalReject>;

  /**
   * `prisma.news`: Exposes CRUD operations for the **News** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more News
    * const news = await prisma.news.findMany()
    * ```
    */
  get news(): Prisma.NewsDelegate<GlobalReject>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<GlobalReject>;

  /**
   * `prisma.response`: Exposes CRUD operations for the **Response** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Responses
    * const responses = await prisma.response.findMany()
    * ```
    */
  get response(): Prisma.ResponseDelegate<GlobalReject>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.BookingDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.3.1
   * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Anketa: 'Anketa',
    ImageModel: 'ImageModel',
    Book: 'Book',
    BookGenre: 'BookGenre',
    Genre: 'Genre',
    News: 'News',
    Comment: 'Comment',
    Response: 'Response',
    Booking: 'Booking'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;


  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Booking: number
    Response: number
    Comment: number
  }

  export type UserCountOutputTypeSelect = {
    Booking?: boolean
    Response?: boolean
    Comment?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type AnketaCountOutputType
   */


  export type AnketaCountOutputType = {
    User: number
  }

  export type AnketaCountOutputTypeSelect = {
    User?: boolean
  }

  export type AnketaCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AnketaCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AnketaCountOutputType
    : S extends undefined
    ? never
    : S extends AnketaCountOutputTypeArgs
    ?'include' extends U
    ? AnketaCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof AnketaCountOutputType ? AnketaCountOutputType[P] : never
  } 
    : AnketaCountOutputType
  : AnketaCountOutputType




  // Custom InputTypes

  /**
   * AnketaCountOutputType without action
   */
  export type AnketaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AnketaCountOutputType
     * 
    **/
    select?: AnketaCountOutputTypeSelect | null
  }



  /**
   * Count Type BookCountOutputType
   */


  export type BookCountOutputType = {
    ImageModel: number
    BookGenre: number
    Booking: number
    Response: number
  }

  export type BookCountOutputTypeSelect = {
    ImageModel?: boolean
    BookGenre?: boolean
    Booking?: boolean
    Response?: boolean
  }

  export type BookCountOutputTypeGetPayload<
    S extends boolean | null | undefined | BookCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? BookCountOutputType
    : S extends undefined
    ? never
    : S extends BookCountOutputTypeArgs
    ?'include' extends U
    ? BookCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof BookCountOutputType ? BookCountOutputType[P] : never
  } 
    : BookCountOutputType
  : BookCountOutputType




  // Custom InputTypes

  /**
   * BookCountOutputType without action
   */
  export type BookCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BookCountOutputType
     * 
    **/
    select?: BookCountOutputTypeSelect | null
  }



  /**
   * Count Type GenreCountOutputType
   */


  export type GenreCountOutputType = {
    BookGenre: number
  }

  export type GenreCountOutputTypeSelect = {
    BookGenre?: boolean
  }

  export type GenreCountOutputTypeGetPayload<
    S extends boolean | null | undefined | GenreCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? GenreCountOutputType
    : S extends undefined
    ? never
    : S extends GenreCountOutputTypeArgs
    ?'include' extends U
    ? GenreCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof GenreCountOutputType ? GenreCountOutputType[P] : never
  } 
    : GenreCountOutputType
  : GenreCountOutputType




  // Custom InputTypes

  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GenreCountOutputType
     * 
    **/
    select?: GenreCountOutputTypeSelect | null
  }



  /**
   * Count Type NewsCountOutputType
   */


  export type NewsCountOutputType = {
    ImageModel: number
    Comment: number
  }

  export type NewsCountOutputTypeSelect = {
    ImageModel?: boolean
    Comment?: boolean
  }

  export type NewsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | NewsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? NewsCountOutputType
    : S extends undefined
    ? never
    : S extends NewsCountOutputTypeArgs
    ?'include' extends U
    ? NewsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof NewsCountOutputType ? NewsCountOutputType[P] : never
  } 
    : NewsCountOutputType
  : NewsCountOutputType




  // Custom InputTypes

  /**
   * NewsCountOutputType without action
   */
  export type NewsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the NewsCountOutputType
     * 
    **/
    select?: NewsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    anketaId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: bigint | null
    anketaId: bigint | null
  }

  export type UserMinAggregateOutputType = {
    id: bigint | null
    firstName: string | null
    lastName: string | null
    fatherName: string | null
    phoneNumber: string | null
    password: string | null
    role: Role | null
    avatar: string | null
    IIN: string | null
    anketaId: bigint | null
  }

  export type UserMaxAggregateOutputType = {
    id: bigint | null
    firstName: string | null
    lastName: string | null
    fatherName: string | null
    phoneNumber: string | null
    password: string | null
    role: Role | null
    avatar: string | null
    IIN: string | null
    anketaId: bigint | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    fatherName: number
    phoneNumber: number
    password: number
    role: number
    avatar: number
    IIN: number
    anketaId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    anketaId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    anketaId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    fatherName?: true
    phoneNumber?: true
    password?: true
    role?: true
    avatar?: true
    IIN?: true
    anketaId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    fatherName?: true
    phoneNumber?: true
    password?: true
    role?: true
    avatar?: true
    IIN?: true
    anketaId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    fatherName?: true
    phoneNumber?: true
    password?: true
    role?: true
    avatar?: true
    IIN?: true
    anketaId?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: bigint
    firstName: string
    lastName: string
    fatherName: string | null
    phoneNumber: string
    password: string
    role: Role
    avatar: string | null
    IIN: string
    anketaId: bigint | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    fatherName?: boolean
    phoneNumber?: boolean
    password?: boolean
    role?: boolean
    avatar?: boolean
    IIN?: boolean
    anketaId?: boolean
    Booking?: boolean | BookingFindManyArgs
    Response?: boolean | ResponseFindManyArgs
    Anketa?: boolean | AnketaArgs
    Comment?: boolean | CommentFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    Booking?: boolean | BookingFindManyArgs
    Response?: boolean | ResponseFindManyArgs
    Anketa?: boolean | AnketaArgs
    Comment?: boolean | CommentFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Booking' ? Array < BookingGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'Response' ? Array < ResponseGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'Anketa' ? AnketaGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'Comment' ? Array < CommentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Booking' ? Array < BookingGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'Response' ? Array < ResponseGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'Anketa' ? AnketaGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'Comment' ? Array < CommentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Booking<T extends BookingFindManyArgs = {}>(args?: Subset<T, BookingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>;

    Response<T extends ResponseFindManyArgs = {}>(args?: Subset<T, ResponseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Response>>, PrismaPromise<Array<ResponseGetPayload<T>>>>;

    Anketa<T extends AnketaArgs = {}>(args?: Subset<T, AnketaArgs>): CheckSelect<T, Prisma__AnketaClient<Anketa | null >, Prisma__AnketaClient<AnketaGetPayload<T> | null >>;

    Comment<T extends CommentFindManyArgs = {}>(args?: Subset<T, CommentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Anketa
   */


  export type AggregateAnketa = {
    _count: AnketaCountAggregateOutputType | null
    _avg: AnketaAvgAggregateOutputType | null
    _sum: AnketaSumAggregateOutputType | null
    _min: AnketaMinAggregateOutputType | null
    _max: AnketaMaxAggregateOutputType | null
  }

  export type AnketaAvgAggregateOutputType = {
    id: number | null
  }

  export type AnketaSumAggregateOutputType = {
    id: bigint | null
  }

  export type AnketaMinAggregateOutputType = {
    id: bigint | null
    birthDay: Date | null
    address: string | null
    education: string | null
    specialty: string | null
    workStudy: string | null
  }

  export type AnketaMaxAggregateOutputType = {
    id: bigint | null
    birthDay: Date | null
    address: string | null
    education: string | null
    specialty: string | null
    workStudy: string | null
  }

  export type AnketaCountAggregateOutputType = {
    id: number
    birthDay: number
    address: number
    education: number
    specialty: number
    workStudy: number
    _all: number
  }


  export type AnketaAvgAggregateInputType = {
    id?: true
  }

  export type AnketaSumAggregateInputType = {
    id?: true
  }

  export type AnketaMinAggregateInputType = {
    id?: true
    birthDay?: true
    address?: true
    education?: true
    specialty?: true
    workStudy?: true
  }

  export type AnketaMaxAggregateInputType = {
    id?: true
    birthDay?: true
    address?: true
    education?: true
    specialty?: true
    workStudy?: true
  }

  export type AnketaCountAggregateInputType = {
    id?: true
    birthDay?: true
    address?: true
    education?: true
    specialty?: true
    workStudy?: true
    _all?: true
  }

  export type AnketaAggregateArgs = {
    /**
     * Filter which Anketa to aggregate.
     * 
    **/
    where?: AnketaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anketas to fetch.
     * 
    **/
    orderBy?: Enumerable<AnketaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AnketaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anketas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anketas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Anketas
    **/
    _count?: true | AnketaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnketaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnketaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnketaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnketaMaxAggregateInputType
  }

  export type GetAnketaAggregateType<T extends AnketaAggregateArgs> = {
        [P in keyof T & keyof AggregateAnketa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnketa[P]>
      : GetScalarType<T[P], AggregateAnketa[P]>
  }




  export type AnketaGroupByArgs = {
    where?: AnketaWhereInput
    orderBy?: Enumerable<AnketaOrderByWithAggregationInput>
    by: Array<AnketaScalarFieldEnum>
    having?: AnketaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnketaCountAggregateInputType | true
    _avg?: AnketaAvgAggregateInputType
    _sum?: AnketaSumAggregateInputType
    _min?: AnketaMinAggregateInputType
    _max?: AnketaMaxAggregateInputType
  }


  export type AnketaGroupByOutputType = {
    id: bigint
    birthDay: Date
    address: string
    education: string
    specialty: string
    workStudy: string
    _count: AnketaCountAggregateOutputType | null
    _avg: AnketaAvgAggregateOutputType | null
    _sum: AnketaSumAggregateOutputType | null
    _min: AnketaMinAggregateOutputType | null
    _max: AnketaMaxAggregateOutputType | null
  }

  type GetAnketaGroupByPayload<T extends AnketaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AnketaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnketaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnketaGroupByOutputType[P]>
            : GetScalarType<T[P], AnketaGroupByOutputType[P]>
        }
      >
    >


  export type AnketaSelect = {
    id?: boolean
    birthDay?: boolean
    address?: boolean
    education?: boolean
    specialty?: boolean
    workStudy?: boolean
    User?: boolean | UserFindManyArgs
    _count?: boolean | AnketaCountOutputTypeArgs
  }

  export type AnketaInclude = {
    User?: boolean | UserFindManyArgs
    _count?: boolean | AnketaCountOutputTypeArgs
  }

  export type AnketaGetPayload<
    S extends boolean | null | undefined | AnketaArgs,
    U = keyof S
      > = S extends true
        ? Anketa
    : S extends undefined
    ? never
    : S extends AnketaArgs | AnketaFindManyArgs
    ?'include' extends U
    ? Anketa  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? Array < UserGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? AnketaCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? Array < UserGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? AnketaCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Anketa ? Anketa[P] : never
  } 
    : Anketa
  : Anketa


  type AnketaCountArgs = Merge<
    Omit<AnketaFindManyArgs, 'select' | 'include'> & {
      select?: AnketaCountAggregateInputType | true
    }
  >

  export interface AnketaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Anketa that matches the filter.
     * @param {AnketaFindUniqueArgs} args - Arguments to find a Anketa
     * @example
     * // Get one Anketa
     * const anketa = await prisma.anketa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AnketaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AnketaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Anketa'> extends True ? CheckSelect<T, Prisma__AnketaClient<Anketa>, Prisma__AnketaClient<AnketaGetPayload<T>>> : CheckSelect<T, Prisma__AnketaClient<Anketa | null >, Prisma__AnketaClient<AnketaGetPayload<T> | null >>

    /**
     * Find the first Anketa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnketaFindFirstArgs} args - Arguments to find a Anketa
     * @example
     * // Get one Anketa
     * const anketa = await prisma.anketa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AnketaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AnketaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Anketa'> extends True ? CheckSelect<T, Prisma__AnketaClient<Anketa>, Prisma__AnketaClient<AnketaGetPayload<T>>> : CheckSelect<T, Prisma__AnketaClient<Anketa | null >, Prisma__AnketaClient<AnketaGetPayload<T> | null >>

    /**
     * Find zero or more Anketas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnketaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Anketas
     * const anketas = await prisma.anketa.findMany()
     * 
     * // Get first 10 Anketas
     * const anketas = await prisma.anketa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const anketaWithIdOnly = await prisma.anketa.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AnketaFindManyArgs>(
      args?: SelectSubset<T, AnketaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Anketa>>, PrismaPromise<Array<AnketaGetPayload<T>>>>

    /**
     * Create a Anketa.
     * @param {AnketaCreateArgs} args - Arguments to create a Anketa.
     * @example
     * // Create one Anketa
     * const Anketa = await prisma.anketa.create({
     *   data: {
     *     // ... data to create a Anketa
     *   }
     * })
     * 
    **/
    create<T extends AnketaCreateArgs>(
      args: SelectSubset<T, AnketaCreateArgs>
    ): CheckSelect<T, Prisma__AnketaClient<Anketa>, Prisma__AnketaClient<AnketaGetPayload<T>>>

    /**
     * Create many Anketas.
     *     @param {AnketaCreateManyArgs} args - Arguments to create many Anketas.
     *     @example
     *     // Create many Anketas
     *     const anketa = await prisma.anketa.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AnketaCreateManyArgs>(
      args?: SelectSubset<T, AnketaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Anketa.
     * @param {AnketaDeleteArgs} args - Arguments to delete one Anketa.
     * @example
     * // Delete one Anketa
     * const Anketa = await prisma.anketa.delete({
     *   where: {
     *     // ... filter to delete one Anketa
     *   }
     * })
     * 
    **/
    delete<T extends AnketaDeleteArgs>(
      args: SelectSubset<T, AnketaDeleteArgs>
    ): CheckSelect<T, Prisma__AnketaClient<Anketa>, Prisma__AnketaClient<AnketaGetPayload<T>>>

    /**
     * Update one Anketa.
     * @param {AnketaUpdateArgs} args - Arguments to update one Anketa.
     * @example
     * // Update one Anketa
     * const anketa = await prisma.anketa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AnketaUpdateArgs>(
      args: SelectSubset<T, AnketaUpdateArgs>
    ): CheckSelect<T, Prisma__AnketaClient<Anketa>, Prisma__AnketaClient<AnketaGetPayload<T>>>

    /**
     * Delete zero or more Anketas.
     * @param {AnketaDeleteManyArgs} args - Arguments to filter Anketas to delete.
     * @example
     * // Delete a few Anketas
     * const { count } = await prisma.anketa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AnketaDeleteManyArgs>(
      args?: SelectSubset<T, AnketaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Anketas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnketaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Anketas
     * const anketa = await prisma.anketa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AnketaUpdateManyArgs>(
      args: SelectSubset<T, AnketaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Anketa.
     * @param {AnketaUpsertArgs} args - Arguments to update or create a Anketa.
     * @example
     * // Update or create a Anketa
     * const anketa = await prisma.anketa.upsert({
     *   create: {
     *     // ... data to create a Anketa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Anketa we want to update
     *   }
     * })
    **/
    upsert<T extends AnketaUpsertArgs>(
      args: SelectSubset<T, AnketaUpsertArgs>
    ): CheckSelect<T, Prisma__AnketaClient<Anketa>, Prisma__AnketaClient<AnketaGetPayload<T>>>

    /**
     * Find one Anketa that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AnketaFindUniqueOrThrowArgs} args - Arguments to find a Anketa
     * @example
     * // Get one Anketa
     * const anketa = await prisma.anketa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AnketaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AnketaFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AnketaClient<Anketa>, Prisma__AnketaClient<AnketaGetPayload<T>>>

    /**
     * Find the first Anketa that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnketaFindFirstOrThrowArgs} args - Arguments to find a Anketa
     * @example
     * // Get one Anketa
     * const anketa = await prisma.anketa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AnketaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AnketaFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AnketaClient<Anketa>, Prisma__AnketaClient<AnketaGetPayload<T>>>

    /**
     * Count the number of Anketas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnketaCountArgs} args - Arguments to filter Anketas to count.
     * @example
     * // Count the number of Anketas
     * const count = await prisma.anketa.count({
     *   where: {
     *     // ... the filter for the Anketas we want to count
     *   }
     * })
    **/
    count<T extends AnketaCountArgs>(
      args?: Subset<T, AnketaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnketaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Anketa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnketaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnketaAggregateArgs>(args: Subset<T, AnketaAggregateArgs>): PrismaPromise<GetAnketaAggregateType<T>>

    /**
     * Group by Anketa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnketaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnketaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnketaGroupByArgs['orderBy'] }
        : { orderBy?: AnketaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnketaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnketaGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Anketa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AnketaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Anketa base type for findUnique actions
   */
  export type AnketaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Anketa
     * 
    **/
    select?: AnketaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnketaInclude | null
    /**
     * Filter, which Anketa to fetch.
     * 
    **/
    where: AnketaWhereUniqueInput
  }

  /**
   * Anketa: findUnique
   */
  export interface AnketaFindUniqueArgs extends AnketaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Anketa base type for findFirst actions
   */
  export type AnketaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Anketa
     * 
    **/
    select?: AnketaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnketaInclude | null
    /**
     * Filter, which Anketa to fetch.
     * 
    **/
    where?: AnketaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anketas to fetch.
     * 
    **/
    orderBy?: Enumerable<AnketaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Anketas.
     * 
    **/
    cursor?: AnketaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anketas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anketas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Anketas.
     * 
    **/
    distinct?: Enumerable<AnketaScalarFieldEnum>
  }

  /**
   * Anketa: findFirst
   */
  export interface AnketaFindFirstArgs extends AnketaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Anketa findMany
   */
  export type AnketaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Anketa
     * 
    **/
    select?: AnketaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnketaInclude | null
    /**
     * Filter, which Anketas to fetch.
     * 
    **/
    where?: AnketaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Anketas to fetch.
     * 
    **/
    orderBy?: Enumerable<AnketaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Anketas.
     * 
    **/
    cursor?: AnketaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Anketas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Anketas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AnketaScalarFieldEnum>
  }


  /**
   * Anketa create
   */
  export type AnketaCreateArgs = {
    /**
     * Select specific fields to fetch from the Anketa
     * 
    **/
    select?: AnketaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnketaInclude | null
    /**
     * The data needed to create a Anketa.
     * 
    **/
    data: XOR<AnketaCreateInput, AnketaUncheckedCreateInput>
  }


  /**
   * Anketa createMany
   */
  export type AnketaCreateManyArgs = {
    /**
     * The data used to create many Anketas.
     * 
    **/
    data: Enumerable<AnketaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Anketa update
   */
  export type AnketaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Anketa
     * 
    **/
    select?: AnketaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnketaInclude | null
    /**
     * The data needed to update a Anketa.
     * 
    **/
    data: XOR<AnketaUpdateInput, AnketaUncheckedUpdateInput>
    /**
     * Choose, which Anketa to update.
     * 
    **/
    where: AnketaWhereUniqueInput
  }


  /**
   * Anketa updateMany
   */
  export type AnketaUpdateManyArgs = {
    /**
     * The data used to update Anketas.
     * 
    **/
    data: XOR<AnketaUpdateManyMutationInput, AnketaUncheckedUpdateManyInput>
    /**
     * Filter which Anketas to update
     * 
    **/
    where?: AnketaWhereInput
  }


  /**
   * Anketa upsert
   */
  export type AnketaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Anketa
     * 
    **/
    select?: AnketaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnketaInclude | null
    /**
     * The filter to search for the Anketa to update in case it exists.
     * 
    **/
    where: AnketaWhereUniqueInput
    /**
     * In case the Anketa found by the `where` argument doesn't exist, create a new Anketa with this data.
     * 
    **/
    create: XOR<AnketaCreateInput, AnketaUncheckedCreateInput>
    /**
     * In case the Anketa was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AnketaUpdateInput, AnketaUncheckedUpdateInput>
  }


  /**
   * Anketa delete
   */
  export type AnketaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Anketa
     * 
    **/
    select?: AnketaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnketaInclude | null
    /**
     * Filter which Anketa to delete.
     * 
    **/
    where: AnketaWhereUniqueInput
  }


  /**
   * Anketa deleteMany
   */
  export type AnketaDeleteManyArgs = {
    /**
     * Filter which Anketas to delete
     * 
    **/
    where?: AnketaWhereInput
  }


  /**
   * Anketa: findUniqueOrThrow
   */
  export type AnketaFindUniqueOrThrowArgs = AnketaFindUniqueArgsBase
      

  /**
   * Anketa: findFirstOrThrow
   */
  export type AnketaFindFirstOrThrowArgs = AnketaFindFirstArgsBase
      

  /**
   * Anketa without action
   */
  export type AnketaArgs = {
    /**
     * Select specific fields to fetch from the Anketa
     * 
    **/
    select?: AnketaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AnketaInclude | null
  }



  /**
   * Model ImageModel
   */


  export type AggregateImageModel = {
    _count: ImageModelCountAggregateOutputType | null
    _avg: ImageModelAvgAggregateOutputType | null
    _sum: ImageModelSumAggregateOutputType | null
    _min: ImageModelMinAggregateOutputType | null
    _max: ImageModelMaxAggregateOutputType | null
  }

  export type ImageModelAvgAggregateOutputType = {
    id: number | null
    bookId: number | null
    newsId: number | null
  }

  export type ImageModelSumAggregateOutputType = {
    id: bigint | null
    bookId: bigint | null
    newsId: bigint | null
  }

  export type ImageModelMinAggregateOutputType = {
    id: bigint | null
    link: string | null
    bookId: bigint | null
    newsId: bigint | null
  }

  export type ImageModelMaxAggregateOutputType = {
    id: bigint | null
    link: string | null
    bookId: bigint | null
    newsId: bigint | null
  }

  export type ImageModelCountAggregateOutputType = {
    id: number
    link: number
    bookId: number
    newsId: number
    _all: number
  }


  export type ImageModelAvgAggregateInputType = {
    id?: true
    bookId?: true
    newsId?: true
  }

  export type ImageModelSumAggregateInputType = {
    id?: true
    bookId?: true
    newsId?: true
  }

  export type ImageModelMinAggregateInputType = {
    id?: true
    link?: true
    bookId?: true
    newsId?: true
  }

  export type ImageModelMaxAggregateInputType = {
    id?: true
    link?: true
    bookId?: true
    newsId?: true
  }

  export type ImageModelCountAggregateInputType = {
    id?: true
    link?: true
    bookId?: true
    newsId?: true
    _all?: true
  }

  export type ImageModelAggregateArgs = {
    /**
     * Filter which ImageModel to aggregate.
     * 
    **/
    where?: ImageModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageModels to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageModelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ImageModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageModels from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageModels.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ImageModels
    **/
    _count?: true | ImageModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageModelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageModelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageModelMaxAggregateInputType
  }

  export type GetImageModelAggregateType<T extends ImageModelAggregateArgs> = {
        [P in keyof T & keyof AggregateImageModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImageModel[P]>
      : GetScalarType<T[P], AggregateImageModel[P]>
  }




  export type ImageModelGroupByArgs = {
    where?: ImageModelWhereInput
    orderBy?: Enumerable<ImageModelOrderByWithAggregationInput>
    by: Array<ImageModelScalarFieldEnum>
    having?: ImageModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageModelCountAggregateInputType | true
    _avg?: ImageModelAvgAggregateInputType
    _sum?: ImageModelSumAggregateInputType
    _min?: ImageModelMinAggregateInputType
    _max?: ImageModelMaxAggregateInputType
  }


  export type ImageModelGroupByOutputType = {
    id: bigint
    link: string
    bookId: bigint | null
    newsId: bigint | null
    _count: ImageModelCountAggregateOutputType | null
    _avg: ImageModelAvgAggregateOutputType | null
    _sum: ImageModelSumAggregateOutputType | null
    _min: ImageModelMinAggregateOutputType | null
    _max: ImageModelMaxAggregateOutputType | null
  }

  type GetImageModelGroupByPayload<T extends ImageModelGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ImageModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageModelGroupByOutputType[P]>
            : GetScalarType<T[P], ImageModelGroupByOutputType[P]>
        }
      >
    >


  export type ImageModelSelect = {
    id?: boolean
    link?: boolean
    bookId?: boolean
    newsId?: boolean
    Book?: boolean | BookArgs
    News?: boolean | NewsArgs
  }

  export type ImageModelInclude = {
    Book?: boolean | BookArgs
    News?: boolean | NewsArgs
  }

  export type ImageModelGetPayload<
    S extends boolean | null | undefined | ImageModelArgs,
    U = keyof S
      > = S extends true
        ? ImageModel
    : S extends undefined
    ? never
    : S extends ImageModelArgs | ImageModelFindManyArgs
    ?'include' extends U
    ? ImageModel  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Book' ? BookGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'News' ? NewsGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Book' ? BookGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'News' ? NewsGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof ImageModel ? ImageModel[P] : never
  } 
    : ImageModel
  : ImageModel


  type ImageModelCountArgs = Merge<
    Omit<ImageModelFindManyArgs, 'select' | 'include'> & {
      select?: ImageModelCountAggregateInputType | true
    }
  >

  export interface ImageModelDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ImageModel that matches the filter.
     * @param {ImageModelFindUniqueArgs} args - Arguments to find a ImageModel
     * @example
     * // Get one ImageModel
     * const imageModel = await prisma.imageModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageModelFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImageModelFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ImageModel'> extends True ? CheckSelect<T, Prisma__ImageModelClient<ImageModel>, Prisma__ImageModelClient<ImageModelGetPayload<T>>> : CheckSelect<T, Prisma__ImageModelClient<ImageModel | null >, Prisma__ImageModelClient<ImageModelGetPayload<T> | null >>

    /**
     * Find the first ImageModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageModelFindFirstArgs} args - Arguments to find a ImageModel
     * @example
     * // Get one ImageModel
     * const imageModel = await prisma.imageModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageModelFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImageModelFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ImageModel'> extends True ? CheckSelect<T, Prisma__ImageModelClient<ImageModel>, Prisma__ImageModelClient<ImageModelGetPayload<T>>> : CheckSelect<T, Prisma__ImageModelClient<ImageModel | null >, Prisma__ImageModelClient<ImageModelGetPayload<T> | null >>

    /**
     * Find zero or more ImageModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageModelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ImageModels
     * const imageModels = await prisma.imageModel.findMany()
     * 
     * // Get first 10 ImageModels
     * const imageModels = await prisma.imageModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageModelWithIdOnly = await prisma.imageModel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImageModelFindManyArgs>(
      args?: SelectSubset<T, ImageModelFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ImageModel>>, PrismaPromise<Array<ImageModelGetPayload<T>>>>

    /**
     * Create a ImageModel.
     * @param {ImageModelCreateArgs} args - Arguments to create a ImageModel.
     * @example
     * // Create one ImageModel
     * const ImageModel = await prisma.imageModel.create({
     *   data: {
     *     // ... data to create a ImageModel
     *   }
     * })
     * 
    **/
    create<T extends ImageModelCreateArgs>(
      args: SelectSubset<T, ImageModelCreateArgs>
    ): CheckSelect<T, Prisma__ImageModelClient<ImageModel>, Prisma__ImageModelClient<ImageModelGetPayload<T>>>

    /**
     * Create many ImageModels.
     *     @param {ImageModelCreateManyArgs} args - Arguments to create many ImageModels.
     *     @example
     *     // Create many ImageModels
     *     const imageModel = await prisma.imageModel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ImageModelCreateManyArgs>(
      args?: SelectSubset<T, ImageModelCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ImageModel.
     * @param {ImageModelDeleteArgs} args - Arguments to delete one ImageModel.
     * @example
     * // Delete one ImageModel
     * const ImageModel = await prisma.imageModel.delete({
     *   where: {
     *     // ... filter to delete one ImageModel
     *   }
     * })
     * 
    **/
    delete<T extends ImageModelDeleteArgs>(
      args: SelectSubset<T, ImageModelDeleteArgs>
    ): CheckSelect<T, Prisma__ImageModelClient<ImageModel>, Prisma__ImageModelClient<ImageModelGetPayload<T>>>

    /**
     * Update one ImageModel.
     * @param {ImageModelUpdateArgs} args - Arguments to update one ImageModel.
     * @example
     * // Update one ImageModel
     * const imageModel = await prisma.imageModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageModelUpdateArgs>(
      args: SelectSubset<T, ImageModelUpdateArgs>
    ): CheckSelect<T, Prisma__ImageModelClient<ImageModel>, Prisma__ImageModelClient<ImageModelGetPayload<T>>>

    /**
     * Delete zero or more ImageModels.
     * @param {ImageModelDeleteManyArgs} args - Arguments to filter ImageModels to delete.
     * @example
     * // Delete a few ImageModels
     * const { count } = await prisma.imageModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageModelDeleteManyArgs>(
      args?: SelectSubset<T, ImageModelDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ImageModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ImageModels
     * const imageModel = await prisma.imageModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageModelUpdateManyArgs>(
      args: SelectSubset<T, ImageModelUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ImageModel.
     * @param {ImageModelUpsertArgs} args - Arguments to update or create a ImageModel.
     * @example
     * // Update or create a ImageModel
     * const imageModel = await prisma.imageModel.upsert({
     *   create: {
     *     // ... data to create a ImageModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ImageModel we want to update
     *   }
     * })
    **/
    upsert<T extends ImageModelUpsertArgs>(
      args: SelectSubset<T, ImageModelUpsertArgs>
    ): CheckSelect<T, Prisma__ImageModelClient<ImageModel>, Prisma__ImageModelClient<ImageModelGetPayload<T>>>

    /**
     * Find one ImageModel that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ImageModelFindUniqueOrThrowArgs} args - Arguments to find a ImageModel
     * @example
     * // Get one ImageModel
     * const imageModel = await prisma.imageModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ImageModelFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ImageModelFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ImageModelClient<ImageModel>, Prisma__ImageModelClient<ImageModelGetPayload<T>>>

    /**
     * Find the first ImageModel that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageModelFindFirstOrThrowArgs} args - Arguments to find a ImageModel
     * @example
     * // Get one ImageModel
     * const imageModel = await prisma.imageModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ImageModelFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ImageModelFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ImageModelClient<ImageModel>, Prisma__ImageModelClient<ImageModelGetPayload<T>>>

    /**
     * Count the number of ImageModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageModelCountArgs} args - Arguments to filter ImageModels to count.
     * @example
     * // Count the number of ImageModels
     * const count = await prisma.imageModel.count({
     *   where: {
     *     // ... the filter for the ImageModels we want to count
     *   }
     * })
    **/
    count<T extends ImageModelCountArgs>(
      args?: Subset<T, ImageModelCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ImageModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageModelAggregateArgs>(args: Subset<T, ImageModelAggregateArgs>): PrismaPromise<GetImageModelAggregateType<T>>

    /**
     * Group by ImageModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageModelGroupByArgs['orderBy'] }
        : { orderBy?: ImageModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageModelGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ImageModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImageModelClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Book<T extends BookArgs = {}>(args?: Subset<T, BookArgs>): CheckSelect<T, Prisma__BookClient<Book | null >, Prisma__BookClient<BookGetPayload<T> | null >>;

    News<T extends NewsArgs = {}>(args?: Subset<T, NewsArgs>): CheckSelect<T, Prisma__NewsClient<News | null >, Prisma__NewsClient<NewsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ImageModel base type for findUnique actions
   */
  export type ImageModelFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ImageModel
     * 
    **/
    select?: ImageModelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageModelInclude | null
    /**
     * Filter, which ImageModel to fetch.
     * 
    **/
    where: ImageModelWhereUniqueInput
  }

  /**
   * ImageModel: findUnique
   */
  export interface ImageModelFindUniqueArgs extends ImageModelFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ImageModel base type for findFirst actions
   */
  export type ImageModelFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ImageModel
     * 
    **/
    select?: ImageModelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageModelInclude | null
    /**
     * Filter, which ImageModel to fetch.
     * 
    **/
    where?: ImageModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageModels to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageModelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ImageModels.
     * 
    **/
    cursor?: ImageModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageModels from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageModels.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ImageModels.
     * 
    **/
    distinct?: Enumerable<ImageModelScalarFieldEnum>
  }

  /**
   * ImageModel: findFirst
   */
  export interface ImageModelFindFirstArgs extends ImageModelFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ImageModel findMany
   */
  export type ImageModelFindManyArgs = {
    /**
     * Select specific fields to fetch from the ImageModel
     * 
    **/
    select?: ImageModelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageModelInclude | null
    /**
     * Filter, which ImageModels to fetch.
     * 
    **/
    where?: ImageModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImageModels to fetch.
     * 
    **/
    orderBy?: Enumerable<ImageModelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ImageModels.
     * 
    **/
    cursor?: ImageModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImageModels from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImageModels.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ImageModelScalarFieldEnum>
  }


  /**
   * ImageModel create
   */
  export type ImageModelCreateArgs = {
    /**
     * Select specific fields to fetch from the ImageModel
     * 
    **/
    select?: ImageModelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageModelInclude | null
    /**
     * The data needed to create a ImageModel.
     * 
    **/
    data: XOR<ImageModelCreateInput, ImageModelUncheckedCreateInput>
  }


  /**
   * ImageModel createMany
   */
  export type ImageModelCreateManyArgs = {
    /**
     * The data used to create many ImageModels.
     * 
    **/
    data: Enumerable<ImageModelCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ImageModel update
   */
  export type ImageModelUpdateArgs = {
    /**
     * Select specific fields to fetch from the ImageModel
     * 
    **/
    select?: ImageModelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageModelInclude | null
    /**
     * The data needed to update a ImageModel.
     * 
    **/
    data: XOR<ImageModelUpdateInput, ImageModelUncheckedUpdateInput>
    /**
     * Choose, which ImageModel to update.
     * 
    **/
    where: ImageModelWhereUniqueInput
  }


  /**
   * ImageModel updateMany
   */
  export type ImageModelUpdateManyArgs = {
    /**
     * The data used to update ImageModels.
     * 
    **/
    data: XOR<ImageModelUpdateManyMutationInput, ImageModelUncheckedUpdateManyInput>
    /**
     * Filter which ImageModels to update
     * 
    **/
    where?: ImageModelWhereInput
  }


  /**
   * ImageModel upsert
   */
  export type ImageModelUpsertArgs = {
    /**
     * Select specific fields to fetch from the ImageModel
     * 
    **/
    select?: ImageModelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageModelInclude | null
    /**
     * The filter to search for the ImageModel to update in case it exists.
     * 
    **/
    where: ImageModelWhereUniqueInput
    /**
     * In case the ImageModel found by the `where` argument doesn't exist, create a new ImageModel with this data.
     * 
    **/
    create: XOR<ImageModelCreateInput, ImageModelUncheckedCreateInput>
    /**
     * In case the ImageModel was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ImageModelUpdateInput, ImageModelUncheckedUpdateInput>
  }


  /**
   * ImageModel delete
   */
  export type ImageModelDeleteArgs = {
    /**
     * Select specific fields to fetch from the ImageModel
     * 
    **/
    select?: ImageModelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageModelInclude | null
    /**
     * Filter which ImageModel to delete.
     * 
    **/
    where: ImageModelWhereUniqueInput
  }


  /**
   * ImageModel deleteMany
   */
  export type ImageModelDeleteManyArgs = {
    /**
     * Filter which ImageModels to delete
     * 
    **/
    where?: ImageModelWhereInput
  }


  /**
   * ImageModel: findUniqueOrThrow
   */
  export type ImageModelFindUniqueOrThrowArgs = ImageModelFindUniqueArgsBase
      

  /**
   * ImageModel: findFirstOrThrow
   */
  export type ImageModelFindFirstOrThrowArgs = ImageModelFindFirstArgsBase
      

  /**
   * ImageModel without action
   */
  export type ImageModelArgs = {
    /**
     * Select specific fields to fetch from the ImageModel
     * 
    **/
    select?: ImageModelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImageModelInclude | null
  }



  /**
   * Model Book
   */


  export type AggregateBook = {
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  export type BookAvgAggregateOutputType = {
    id: number | null
    count: number | null
    rating: number | null
    price: number | null
  }

  export type BookSumAggregateOutputType = {
    id: bigint | null
    count: number | null
    rating: number | null
    price: number | null
  }

  export type BookMinAggregateOutputType = {
    id: bigint | null
    title: string | null
    author: string | null
    isbn: string | null
    description: string | null
    count: number | null
    rating: number | null
    price: number | null
    publishing_date: Date | null
    topic: string | null
  }

  export type BookMaxAggregateOutputType = {
    id: bigint | null
    title: string | null
    author: string | null
    isbn: string | null
    description: string | null
    count: number | null
    rating: number | null
    price: number | null
    publishing_date: Date | null
    topic: string | null
  }

  export type BookCountAggregateOutputType = {
    id: number
    title: number
    author: number
    isbn: number
    description: number
    count: number
    rating: number
    price: number
    publishing_date: number
    topic: number
    _all: number
  }


  export type BookAvgAggregateInputType = {
    id?: true
    count?: true
    rating?: true
    price?: true
  }

  export type BookSumAggregateInputType = {
    id?: true
    count?: true
    rating?: true
    price?: true
  }

  export type BookMinAggregateInputType = {
    id?: true
    title?: true
    author?: true
    isbn?: true
    description?: true
    count?: true
    rating?: true
    price?: true
    publishing_date?: true
    topic?: true
  }

  export type BookMaxAggregateInputType = {
    id?: true
    title?: true
    author?: true
    isbn?: true
    description?: true
    count?: true
    rating?: true
    price?: true
    publishing_date?: true
    topic?: true
  }

  export type BookCountAggregateInputType = {
    id?: true
    title?: true
    author?: true
    isbn?: true
    description?: true
    count?: true
    rating?: true
    price?: true
    publishing_date?: true
    topic?: true
    _all?: true
  }

  export type BookAggregateArgs = {
    /**
     * Filter which Book to aggregate.
     * 
    **/
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     * 
    **/
    orderBy?: Enumerable<BookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Books
    **/
    _count?: true | BookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookMaxAggregateInputType
  }

  export type GetBookAggregateType<T extends BookAggregateArgs> = {
        [P in keyof T & keyof AggregateBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBook[P]>
      : GetScalarType<T[P], AggregateBook[P]>
  }




  export type BookGroupByArgs = {
    where?: BookWhereInput
    orderBy?: Enumerable<BookOrderByWithAggregationInput>
    by: Array<BookScalarFieldEnum>
    having?: BookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookCountAggregateInputType | true
    _avg?: BookAvgAggregateInputType
    _sum?: BookSumAggregateInputType
    _min?: BookMinAggregateInputType
    _max?: BookMaxAggregateInputType
  }


  export type BookGroupByOutputType = {
    id: bigint
    title: string
    author: string
    isbn: string
    description: string
    count: number
    rating: number
    price: number
    publishing_date: Date
    topic: string
    _count: BookCountAggregateOutputType | null
    _avg: BookAvgAggregateOutputType | null
    _sum: BookSumAggregateOutputType | null
    _min: BookMinAggregateOutputType | null
    _max: BookMaxAggregateOutputType | null
  }

  type GetBookGroupByPayload<T extends BookGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookGroupByOutputType[P]>
            : GetScalarType<T[P], BookGroupByOutputType[P]>
        }
      >
    >


  export type BookSelect = {
    id?: boolean
    title?: boolean
    author?: boolean
    isbn?: boolean
    description?: boolean
    count?: boolean
    rating?: boolean
    price?: boolean
    publishing_date?: boolean
    topic?: boolean
    ImageModel?: boolean | ImageModelFindManyArgs
    BookGenre?: boolean | BookGenreFindManyArgs
    Booking?: boolean | BookingFindManyArgs
    Response?: boolean | ResponseFindManyArgs
    _count?: boolean | BookCountOutputTypeArgs
  }

  export type BookInclude = {
    ImageModel?: boolean | ImageModelFindManyArgs
    BookGenre?: boolean | BookGenreFindManyArgs
    Booking?: boolean | BookingFindManyArgs
    Response?: boolean | ResponseFindManyArgs
    _count?: boolean | BookCountOutputTypeArgs
  }

  export type BookGetPayload<
    S extends boolean | null | undefined | BookArgs,
    U = keyof S
      > = S extends true
        ? Book
    : S extends undefined
    ? never
    : S extends BookArgs | BookFindManyArgs
    ?'include' extends U
    ? Book  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ImageModel' ? Array < ImageModelGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'BookGenre' ? Array < BookGenreGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'Booking' ? Array < BookingGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'Response' ? Array < ResponseGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? BookCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ImageModel' ? Array < ImageModelGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'BookGenre' ? Array < BookGenreGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'Booking' ? Array < BookingGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'Response' ? Array < ResponseGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? BookCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Book ? Book[P] : never
  } 
    : Book
  : Book


  type BookCountArgs = Merge<
    Omit<BookFindManyArgs, 'select' | 'include'> & {
      select?: BookCountAggregateInputType | true
    }
  >

  export interface BookDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Book that matches the filter.
     * @param {BookFindUniqueArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Book'> extends True ? CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>> : CheckSelect<T, Prisma__BookClient<Book | null >, Prisma__BookClient<BookGetPayload<T> | null >>

    /**
     * Find the first Book that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Book'> extends True ? CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>> : CheckSelect<T, Prisma__BookClient<Book | null >, Prisma__BookClient<BookGetPayload<T> | null >>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.book.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.book.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookWithIdOnly = await prisma.book.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookFindManyArgs>(
      args?: SelectSubset<T, BookFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Book>>, PrismaPromise<Array<BookGetPayload<T>>>>

    /**
     * Create a Book.
     * @param {BookCreateArgs} args - Arguments to create a Book.
     * @example
     * // Create one Book
     * const Book = await prisma.book.create({
     *   data: {
     *     // ... data to create a Book
     *   }
     * })
     * 
    **/
    create<T extends BookCreateArgs>(
      args: SelectSubset<T, BookCreateArgs>
    ): CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>>

    /**
     * Create many Books.
     *     @param {BookCreateManyArgs} args - Arguments to create many Books.
     *     @example
     *     // Create many Books
     *     const book = await prisma.book.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookCreateManyArgs>(
      args?: SelectSubset<T, BookCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Book.
     * @param {BookDeleteArgs} args - Arguments to delete one Book.
     * @example
     * // Delete one Book
     * const Book = await prisma.book.delete({
     *   where: {
     *     // ... filter to delete one Book
     *   }
     * })
     * 
    **/
    delete<T extends BookDeleteArgs>(
      args: SelectSubset<T, BookDeleteArgs>
    ): CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>>

    /**
     * Update one Book.
     * @param {BookUpdateArgs} args - Arguments to update one Book.
     * @example
     * // Update one Book
     * const book = await prisma.book.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookUpdateArgs>(
      args: SelectSubset<T, BookUpdateArgs>
    ): CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>>

    /**
     * Delete zero or more Books.
     * @param {BookDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.book.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookDeleteManyArgs>(
      args?: SelectSubset<T, BookDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const book = await prisma.book.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookUpdateManyArgs>(
      args: SelectSubset<T, BookUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Book.
     * @param {BookUpsertArgs} args - Arguments to update or create a Book.
     * @example
     * // Update or create a Book
     * const book = await prisma.book.upsert({
     *   create: {
     *     // ... data to create a Book
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Book we want to update
     *   }
     * })
    **/
    upsert<T extends BookUpsertArgs>(
      args: SelectSubset<T, BookUpsertArgs>
    ): CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>>

    /**
     * Find one Book that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {BookFindUniqueOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BookFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>>

    /**
     * Find the first Book that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookFindFirstOrThrowArgs} args - Arguments to find a Book
     * @example
     * // Get one Book
     * const book = await prisma.book.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BookFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__BookClient<Book>, Prisma__BookClient<BookGetPayload<T>>>

    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.book.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends BookCountArgs>(
      args?: Subset<T, BookCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookAggregateArgs>(args: Subset<T, BookAggregateArgs>): PrismaPromise<GetBookAggregateType<T>>

    /**
     * Group by Book.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookGroupByArgs['orderBy'] }
        : { orderBy?: BookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Book.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ImageModel<T extends ImageModelFindManyArgs = {}>(args?: Subset<T, ImageModelFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ImageModel>>, PrismaPromise<Array<ImageModelGetPayload<T>>>>;

    BookGenre<T extends BookGenreFindManyArgs = {}>(args?: Subset<T, BookGenreFindManyArgs>): CheckSelect<T, PrismaPromise<Array<BookGenre>>, PrismaPromise<Array<BookGenreGetPayload<T>>>>;

    Booking<T extends BookingFindManyArgs = {}>(args?: Subset<T, BookingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>;

    Response<T extends ResponseFindManyArgs = {}>(args?: Subset<T, ResponseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Response>>, PrismaPromise<Array<ResponseGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Book base type for findUnique actions
   */
  export type BookFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter, which Book to fetch.
     * 
    **/
    where: BookWhereUniqueInput
  }

  /**
   * Book: findUnique
   */
  export interface BookFindUniqueArgs extends BookFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Book base type for findFirst actions
   */
  export type BookFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter, which Book to fetch.
     * 
    **/
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     * 
    **/
    orderBy?: Enumerable<BookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Books.
     * 
    **/
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Books.
     * 
    **/
    distinct?: Enumerable<BookScalarFieldEnum>
  }

  /**
   * Book: findFirst
   */
  export interface BookFindFirstArgs extends BookFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Book findMany
   */
  export type BookFindManyArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter, which Books to fetch.
     * 
    **/
    where?: BookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Books to fetch.
     * 
    **/
    orderBy?: Enumerable<BookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Books.
     * 
    **/
    cursor?: BookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Books from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Books.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BookScalarFieldEnum>
  }


  /**
   * Book create
   */
  export type BookCreateArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * The data needed to create a Book.
     * 
    **/
    data: XOR<BookCreateInput, BookUncheckedCreateInput>
  }


  /**
   * Book createMany
   */
  export type BookCreateManyArgs = {
    /**
     * The data used to create many Books.
     * 
    **/
    data: Enumerable<BookCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Book update
   */
  export type BookUpdateArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * The data needed to update a Book.
     * 
    **/
    data: XOR<BookUpdateInput, BookUncheckedUpdateInput>
    /**
     * Choose, which Book to update.
     * 
    **/
    where: BookWhereUniqueInput
  }


  /**
   * Book updateMany
   */
  export type BookUpdateManyArgs = {
    /**
     * The data used to update Books.
     * 
    **/
    data: XOR<BookUpdateManyMutationInput, BookUncheckedUpdateManyInput>
    /**
     * Filter which Books to update
     * 
    **/
    where?: BookWhereInput
  }


  /**
   * Book upsert
   */
  export type BookUpsertArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * The filter to search for the Book to update in case it exists.
     * 
    **/
    where: BookWhereUniqueInput
    /**
     * In case the Book found by the `where` argument doesn't exist, create a new Book with this data.
     * 
    **/
    create: XOR<BookCreateInput, BookUncheckedCreateInput>
    /**
     * In case the Book was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BookUpdateInput, BookUncheckedUpdateInput>
  }


  /**
   * Book delete
   */
  export type BookDeleteArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
    /**
     * Filter which Book to delete.
     * 
    **/
    where: BookWhereUniqueInput
  }


  /**
   * Book deleteMany
   */
  export type BookDeleteManyArgs = {
    /**
     * Filter which Books to delete
     * 
    **/
    where?: BookWhereInput
  }


  /**
   * Book: findUniqueOrThrow
   */
  export type BookFindUniqueOrThrowArgs = BookFindUniqueArgsBase
      

  /**
   * Book: findFirstOrThrow
   */
  export type BookFindFirstOrThrowArgs = BookFindFirstArgsBase
      

  /**
   * Book without action
   */
  export type BookArgs = {
    /**
     * Select specific fields to fetch from the Book
     * 
    **/
    select?: BookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookInclude | null
  }



  /**
   * Model BookGenre
   */


  export type AggregateBookGenre = {
    _count: BookGenreCountAggregateOutputType | null
    _avg: BookGenreAvgAggregateOutputType | null
    _sum: BookGenreSumAggregateOutputType | null
    _min: BookGenreMinAggregateOutputType | null
    _max: BookGenreMaxAggregateOutputType | null
  }

  export type BookGenreAvgAggregateOutputType = {
    id: number | null
    bookId: number | null
    genreId: number | null
  }

  export type BookGenreSumAggregateOutputType = {
    id: bigint | null
    bookId: bigint | null
    genreId: bigint | null
  }

  export type BookGenreMinAggregateOutputType = {
    id: bigint | null
    bookId: bigint | null
    genreId: bigint | null
  }

  export type BookGenreMaxAggregateOutputType = {
    id: bigint | null
    bookId: bigint | null
    genreId: bigint | null
  }

  export type BookGenreCountAggregateOutputType = {
    id: number
    bookId: number
    genreId: number
    _all: number
  }


  export type BookGenreAvgAggregateInputType = {
    id?: true
    bookId?: true
    genreId?: true
  }

  export type BookGenreSumAggregateInputType = {
    id?: true
    bookId?: true
    genreId?: true
  }

  export type BookGenreMinAggregateInputType = {
    id?: true
    bookId?: true
    genreId?: true
  }

  export type BookGenreMaxAggregateInputType = {
    id?: true
    bookId?: true
    genreId?: true
  }

  export type BookGenreCountAggregateInputType = {
    id?: true
    bookId?: true
    genreId?: true
    _all?: true
  }

  export type BookGenreAggregateArgs = {
    /**
     * Filter which BookGenre to aggregate.
     * 
    **/
    where?: BookGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookGenres to fetch.
     * 
    **/
    orderBy?: Enumerable<BookGenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BookGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookGenres from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookGenres.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookGenres
    **/
    _count?: true | BookGenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookGenreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookGenreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookGenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookGenreMaxAggregateInputType
  }

  export type GetBookGenreAggregateType<T extends BookGenreAggregateArgs> = {
        [P in keyof T & keyof AggregateBookGenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookGenre[P]>
      : GetScalarType<T[P], AggregateBookGenre[P]>
  }




  export type BookGenreGroupByArgs = {
    where?: BookGenreWhereInput
    orderBy?: Enumerable<BookGenreOrderByWithAggregationInput>
    by: Array<BookGenreScalarFieldEnum>
    having?: BookGenreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookGenreCountAggregateInputType | true
    _avg?: BookGenreAvgAggregateInputType
    _sum?: BookGenreSumAggregateInputType
    _min?: BookGenreMinAggregateInputType
    _max?: BookGenreMaxAggregateInputType
  }


  export type BookGenreGroupByOutputType = {
    id: bigint
    bookId: bigint
    genreId: bigint
    _count: BookGenreCountAggregateOutputType | null
    _avg: BookGenreAvgAggregateOutputType | null
    _sum: BookGenreSumAggregateOutputType | null
    _min: BookGenreMinAggregateOutputType | null
    _max: BookGenreMaxAggregateOutputType | null
  }

  type GetBookGenreGroupByPayload<T extends BookGenreGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BookGenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookGenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookGenreGroupByOutputType[P]>
            : GetScalarType<T[P], BookGenreGroupByOutputType[P]>
        }
      >
    >


  export type BookGenreSelect = {
    id?: boolean
    bookId?: boolean
    genreId?: boolean
    Book?: boolean | BookArgs
    Genre?: boolean | GenreArgs
  }

  export type BookGenreInclude = {
    Book?: boolean | BookArgs
    Genre?: boolean | GenreArgs
  }

  export type BookGenreGetPayload<
    S extends boolean | null | undefined | BookGenreArgs,
    U = keyof S
      > = S extends true
        ? BookGenre
    : S extends undefined
    ? never
    : S extends BookGenreArgs | BookGenreFindManyArgs
    ?'include' extends U
    ? BookGenre  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Book' ? BookGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'Genre' ? GenreGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Book' ? BookGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'Genre' ? GenreGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof BookGenre ? BookGenre[P] : never
  } 
    : BookGenre
  : BookGenre


  type BookGenreCountArgs = Merge<
    Omit<BookGenreFindManyArgs, 'select' | 'include'> & {
      select?: BookGenreCountAggregateInputType | true
    }
  >

  export interface BookGenreDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one BookGenre that matches the filter.
     * @param {BookGenreFindUniqueArgs} args - Arguments to find a BookGenre
     * @example
     * // Get one BookGenre
     * const bookGenre = await prisma.bookGenre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookGenreFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookGenreFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BookGenre'> extends True ? CheckSelect<T, Prisma__BookGenreClient<BookGenre>, Prisma__BookGenreClient<BookGenreGetPayload<T>>> : CheckSelect<T, Prisma__BookGenreClient<BookGenre | null >, Prisma__BookGenreClient<BookGenreGetPayload<T> | null >>

    /**
     * Find the first BookGenre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGenreFindFirstArgs} args - Arguments to find a BookGenre
     * @example
     * // Get one BookGenre
     * const bookGenre = await prisma.bookGenre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookGenreFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookGenreFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BookGenre'> extends True ? CheckSelect<T, Prisma__BookGenreClient<BookGenre>, Prisma__BookGenreClient<BookGenreGetPayload<T>>> : CheckSelect<T, Prisma__BookGenreClient<BookGenre | null >, Prisma__BookGenreClient<BookGenreGetPayload<T> | null >>

    /**
     * Find zero or more BookGenres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGenreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookGenres
     * const bookGenres = await prisma.bookGenre.findMany()
     * 
     * // Get first 10 BookGenres
     * const bookGenres = await prisma.bookGenre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookGenreWithIdOnly = await prisma.bookGenre.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookGenreFindManyArgs>(
      args?: SelectSubset<T, BookGenreFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<BookGenre>>, PrismaPromise<Array<BookGenreGetPayload<T>>>>

    /**
     * Create a BookGenre.
     * @param {BookGenreCreateArgs} args - Arguments to create a BookGenre.
     * @example
     * // Create one BookGenre
     * const BookGenre = await prisma.bookGenre.create({
     *   data: {
     *     // ... data to create a BookGenre
     *   }
     * })
     * 
    **/
    create<T extends BookGenreCreateArgs>(
      args: SelectSubset<T, BookGenreCreateArgs>
    ): CheckSelect<T, Prisma__BookGenreClient<BookGenre>, Prisma__BookGenreClient<BookGenreGetPayload<T>>>

    /**
     * Create many BookGenres.
     *     @param {BookGenreCreateManyArgs} args - Arguments to create many BookGenres.
     *     @example
     *     // Create many BookGenres
     *     const bookGenre = await prisma.bookGenre.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookGenreCreateManyArgs>(
      args?: SelectSubset<T, BookGenreCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a BookGenre.
     * @param {BookGenreDeleteArgs} args - Arguments to delete one BookGenre.
     * @example
     * // Delete one BookGenre
     * const BookGenre = await prisma.bookGenre.delete({
     *   where: {
     *     // ... filter to delete one BookGenre
     *   }
     * })
     * 
    **/
    delete<T extends BookGenreDeleteArgs>(
      args: SelectSubset<T, BookGenreDeleteArgs>
    ): CheckSelect<T, Prisma__BookGenreClient<BookGenre>, Prisma__BookGenreClient<BookGenreGetPayload<T>>>

    /**
     * Update one BookGenre.
     * @param {BookGenreUpdateArgs} args - Arguments to update one BookGenre.
     * @example
     * // Update one BookGenre
     * const bookGenre = await prisma.bookGenre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookGenreUpdateArgs>(
      args: SelectSubset<T, BookGenreUpdateArgs>
    ): CheckSelect<T, Prisma__BookGenreClient<BookGenre>, Prisma__BookGenreClient<BookGenreGetPayload<T>>>

    /**
     * Delete zero or more BookGenres.
     * @param {BookGenreDeleteManyArgs} args - Arguments to filter BookGenres to delete.
     * @example
     * // Delete a few BookGenres
     * const { count } = await prisma.bookGenre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookGenreDeleteManyArgs>(
      args?: SelectSubset<T, BookGenreDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookGenres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGenreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookGenres
     * const bookGenre = await prisma.bookGenre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookGenreUpdateManyArgs>(
      args: SelectSubset<T, BookGenreUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one BookGenre.
     * @param {BookGenreUpsertArgs} args - Arguments to update or create a BookGenre.
     * @example
     * // Update or create a BookGenre
     * const bookGenre = await prisma.bookGenre.upsert({
     *   create: {
     *     // ... data to create a BookGenre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookGenre we want to update
     *   }
     * })
    **/
    upsert<T extends BookGenreUpsertArgs>(
      args: SelectSubset<T, BookGenreUpsertArgs>
    ): CheckSelect<T, Prisma__BookGenreClient<BookGenre>, Prisma__BookGenreClient<BookGenreGetPayload<T>>>

    /**
     * Find one BookGenre that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {BookGenreFindUniqueOrThrowArgs} args - Arguments to find a BookGenre
     * @example
     * // Get one BookGenre
     * const bookGenre = await prisma.bookGenre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookGenreFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BookGenreFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__BookGenreClient<BookGenre>, Prisma__BookGenreClient<BookGenreGetPayload<T>>>

    /**
     * Find the first BookGenre that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGenreFindFirstOrThrowArgs} args - Arguments to find a BookGenre
     * @example
     * // Get one BookGenre
     * const bookGenre = await prisma.bookGenre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookGenreFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BookGenreFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__BookGenreClient<BookGenre>, Prisma__BookGenreClient<BookGenreGetPayload<T>>>

    /**
     * Count the number of BookGenres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGenreCountArgs} args - Arguments to filter BookGenres to count.
     * @example
     * // Count the number of BookGenres
     * const count = await prisma.bookGenre.count({
     *   where: {
     *     // ... the filter for the BookGenres we want to count
     *   }
     * })
    **/
    count<T extends BookGenreCountArgs>(
      args?: Subset<T, BookGenreCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookGenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookGenre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookGenreAggregateArgs>(args: Subset<T, BookGenreAggregateArgs>): PrismaPromise<GetBookGenreAggregateType<T>>

    /**
     * Group by BookGenre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookGenreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookGenreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookGenreGroupByArgs['orderBy'] }
        : { orderBy?: BookGenreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookGenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookGenreGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BookGenre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookGenreClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Book<T extends BookArgs = {}>(args?: Subset<T, BookArgs>): CheckSelect<T, Prisma__BookClient<Book | null >, Prisma__BookClient<BookGetPayload<T> | null >>;

    Genre<T extends GenreArgs = {}>(args?: Subset<T, GenreArgs>): CheckSelect<T, Prisma__GenreClient<Genre | null >, Prisma__GenreClient<GenreGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BookGenre base type for findUnique actions
   */
  export type BookGenreFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BookGenre
     * 
    **/
    select?: BookGenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookGenreInclude | null
    /**
     * Filter, which BookGenre to fetch.
     * 
    **/
    where: BookGenreWhereUniqueInput
  }

  /**
   * BookGenre: findUnique
   */
  export interface BookGenreFindUniqueArgs extends BookGenreFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BookGenre base type for findFirst actions
   */
  export type BookGenreFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BookGenre
     * 
    **/
    select?: BookGenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookGenreInclude | null
    /**
     * Filter, which BookGenre to fetch.
     * 
    **/
    where?: BookGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookGenres to fetch.
     * 
    **/
    orderBy?: Enumerable<BookGenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookGenres.
     * 
    **/
    cursor?: BookGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookGenres from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookGenres.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookGenres.
     * 
    **/
    distinct?: Enumerable<BookGenreScalarFieldEnum>
  }

  /**
   * BookGenre: findFirst
   */
  export interface BookGenreFindFirstArgs extends BookGenreFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BookGenre findMany
   */
  export type BookGenreFindManyArgs = {
    /**
     * Select specific fields to fetch from the BookGenre
     * 
    **/
    select?: BookGenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookGenreInclude | null
    /**
     * Filter, which BookGenres to fetch.
     * 
    **/
    where?: BookGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookGenres to fetch.
     * 
    **/
    orderBy?: Enumerable<BookGenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookGenres.
     * 
    **/
    cursor?: BookGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookGenres from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookGenres.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BookGenreScalarFieldEnum>
  }


  /**
   * BookGenre create
   */
  export type BookGenreCreateArgs = {
    /**
     * Select specific fields to fetch from the BookGenre
     * 
    **/
    select?: BookGenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookGenreInclude | null
    /**
     * The data needed to create a BookGenre.
     * 
    **/
    data: XOR<BookGenreCreateInput, BookGenreUncheckedCreateInput>
  }


  /**
   * BookGenre createMany
   */
  export type BookGenreCreateManyArgs = {
    /**
     * The data used to create many BookGenres.
     * 
    **/
    data: Enumerable<BookGenreCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BookGenre update
   */
  export type BookGenreUpdateArgs = {
    /**
     * Select specific fields to fetch from the BookGenre
     * 
    **/
    select?: BookGenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookGenreInclude | null
    /**
     * The data needed to update a BookGenre.
     * 
    **/
    data: XOR<BookGenreUpdateInput, BookGenreUncheckedUpdateInput>
    /**
     * Choose, which BookGenre to update.
     * 
    **/
    where: BookGenreWhereUniqueInput
  }


  /**
   * BookGenre updateMany
   */
  export type BookGenreUpdateManyArgs = {
    /**
     * The data used to update BookGenres.
     * 
    **/
    data: XOR<BookGenreUpdateManyMutationInput, BookGenreUncheckedUpdateManyInput>
    /**
     * Filter which BookGenres to update
     * 
    **/
    where?: BookGenreWhereInput
  }


  /**
   * BookGenre upsert
   */
  export type BookGenreUpsertArgs = {
    /**
     * Select specific fields to fetch from the BookGenre
     * 
    **/
    select?: BookGenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookGenreInclude | null
    /**
     * The filter to search for the BookGenre to update in case it exists.
     * 
    **/
    where: BookGenreWhereUniqueInput
    /**
     * In case the BookGenre found by the `where` argument doesn't exist, create a new BookGenre with this data.
     * 
    **/
    create: XOR<BookGenreCreateInput, BookGenreUncheckedCreateInput>
    /**
     * In case the BookGenre was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BookGenreUpdateInput, BookGenreUncheckedUpdateInput>
  }


  /**
   * BookGenre delete
   */
  export type BookGenreDeleteArgs = {
    /**
     * Select specific fields to fetch from the BookGenre
     * 
    **/
    select?: BookGenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookGenreInclude | null
    /**
     * Filter which BookGenre to delete.
     * 
    **/
    where: BookGenreWhereUniqueInput
  }


  /**
   * BookGenre deleteMany
   */
  export type BookGenreDeleteManyArgs = {
    /**
     * Filter which BookGenres to delete
     * 
    **/
    where?: BookGenreWhereInput
  }


  /**
   * BookGenre: findUniqueOrThrow
   */
  export type BookGenreFindUniqueOrThrowArgs = BookGenreFindUniqueArgsBase
      

  /**
   * BookGenre: findFirstOrThrow
   */
  export type BookGenreFindFirstOrThrowArgs = BookGenreFindFirstArgsBase
      

  /**
   * BookGenre without action
   */
  export type BookGenreArgs = {
    /**
     * Select specific fields to fetch from the BookGenre
     * 
    **/
    select?: BookGenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookGenreInclude | null
  }



  /**
   * Model Genre
   */


  export type AggregateGenre = {
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  export type GenreAvgAggregateOutputType = {
    id: number | null
  }

  export type GenreSumAggregateOutputType = {
    id: bigint | null
  }

  export type GenreMinAggregateOutputType = {
    id: bigint | null
    name: string | null
  }

  export type GenreMaxAggregateOutputType = {
    id: bigint | null
    name: string | null
  }

  export type GenreCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type GenreAvgAggregateInputType = {
    id?: true
  }

  export type GenreSumAggregateInputType = {
    id?: true
  }

  export type GenreMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type GenreMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type GenreCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type GenreAggregateArgs = {
    /**
     * Filter which Genre to aggregate.
     * 
    **/
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     * 
    **/
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Genres
    **/
    _count?: true | GenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GenreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GenreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenreMaxAggregateInputType
  }

  export type GetGenreAggregateType<T extends GenreAggregateArgs> = {
        [P in keyof T & keyof AggregateGenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenre[P]>
      : GetScalarType<T[P], AggregateGenre[P]>
  }




  export type GenreGroupByArgs = {
    where?: GenreWhereInput
    orderBy?: Enumerable<GenreOrderByWithAggregationInput>
    by: Array<GenreScalarFieldEnum>
    having?: GenreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenreCountAggregateInputType | true
    _avg?: GenreAvgAggregateInputType
    _sum?: GenreSumAggregateInputType
    _min?: GenreMinAggregateInputType
    _max?: GenreMaxAggregateInputType
  }


  export type GenreGroupByOutputType = {
    id: bigint
    name: string
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  type GetGenreGroupByPayload<T extends GenreGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenreGroupByOutputType[P]>
            : GetScalarType<T[P], GenreGroupByOutputType[P]>
        }
      >
    >


  export type GenreSelect = {
    id?: boolean
    name?: boolean
    BookGenre?: boolean | BookGenreFindManyArgs
    _count?: boolean | GenreCountOutputTypeArgs
  }

  export type GenreInclude = {
    BookGenre?: boolean | BookGenreFindManyArgs
    _count?: boolean | GenreCountOutputTypeArgs
  }

  export type GenreGetPayload<
    S extends boolean | null | undefined | GenreArgs,
    U = keyof S
      > = S extends true
        ? Genre
    : S extends undefined
    ? never
    : S extends GenreArgs | GenreFindManyArgs
    ?'include' extends U
    ? Genre  & {
    [P in TrueKeys<S['include']>]:
        P extends 'BookGenre' ? Array < BookGenreGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? GenreCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'BookGenre' ? Array < BookGenreGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? GenreCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Genre ? Genre[P] : never
  } 
    : Genre
  : Genre


  type GenreCountArgs = Merge<
    Omit<GenreFindManyArgs, 'select' | 'include'> & {
      select?: GenreCountAggregateInputType | true
    }
  >

  export interface GenreDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Genre that matches the filter.
     * @param {GenreFindUniqueArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GenreFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GenreFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Genre'> extends True ? CheckSelect<T, Prisma__GenreClient<Genre>, Prisma__GenreClient<GenreGetPayload<T>>> : CheckSelect<T, Prisma__GenreClient<Genre | null >, Prisma__GenreClient<GenreGetPayload<T> | null >>

    /**
     * Find the first Genre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GenreFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GenreFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Genre'> extends True ? CheckSelect<T, Prisma__GenreClient<Genre>, Prisma__GenreClient<GenreGetPayload<T>>> : CheckSelect<T, Prisma__GenreClient<Genre | null >, Prisma__GenreClient<GenreGetPayload<T> | null >>

    /**
     * Find zero or more Genres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genres
     * const genres = await prisma.genre.findMany()
     * 
     * // Get first 10 Genres
     * const genres = await prisma.genre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const genreWithIdOnly = await prisma.genre.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GenreFindManyArgs>(
      args?: SelectSubset<T, GenreFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Genre>>, PrismaPromise<Array<GenreGetPayload<T>>>>

    /**
     * Create a Genre.
     * @param {GenreCreateArgs} args - Arguments to create a Genre.
     * @example
     * // Create one Genre
     * const Genre = await prisma.genre.create({
     *   data: {
     *     // ... data to create a Genre
     *   }
     * })
     * 
    **/
    create<T extends GenreCreateArgs>(
      args: SelectSubset<T, GenreCreateArgs>
    ): CheckSelect<T, Prisma__GenreClient<Genre>, Prisma__GenreClient<GenreGetPayload<T>>>

    /**
     * Create many Genres.
     *     @param {GenreCreateManyArgs} args - Arguments to create many Genres.
     *     @example
     *     // Create many Genres
     *     const genre = await prisma.genre.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GenreCreateManyArgs>(
      args?: SelectSubset<T, GenreCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Genre.
     * @param {GenreDeleteArgs} args - Arguments to delete one Genre.
     * @example
     * // Delete one Genre
     * const Genre = await prisma.genre.delete({
     *   where: {
     *     // ... filter to delete one Genre
     *   }
     * })
     * 
    **/
    delete<T extends GenreDeleteArgs>(
      args: SelectSubset<T, GenreDeleteArgs>
    ): CheckSelect<T, Prisma__GenreClient<Genre>, Prisma__GenreClient<GenreGetPayload<T>>>

    /**
     * Update one Genre.
     * @param {GenreUpdateArgs} args - Arguments to update one Genre.
     * @example
     * // Update one Genre
     * const genre = await prisma.genre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GenreUpdateArgs>(
      args: SelectSubset<T, GenreUpdateArgs>
    ): CheckSelect<T, Prisma__GenreClient<Genre>, Prisma__GenreClient<GenreGetPayload<T>>>

    /**
     * Delete zero or more Genres.
     * @param {GenreDeleteManyArgs} args - Arguments to filter Genres to delete.
     * @example
     * // Delete a few Genres
     * const { count } = await prisma.genre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GenreDeleteManyArgs>(
      args?: SelectSubset<T, GenreDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genres
     * const genre = await prisma.genre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GenreUpdateManyArgs>(
      args: SelectSubset<T, GenreUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Genre.
     * @param {GenreUpsertArgs} args - Arguments to update or create a Genre.
     * @example
     * // Update or create a Genre
     * const genre = await prisma.genre.upsert({
     *   create: {
     *     // ... data to create a Genre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Genre we want to update
     *   }
     * })
    **/
    upsert<T extends GenreUpsertArgs>(
      args: SelectSubset<T, GenreUpsertArgs>
    ): CheckSelect<T, Prisma__GenreClient<Genre>, Prisma__GenreClient<GenreGetPayload<T>>>

    /**
     * Find one Genre that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GenreFindUniqueOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GenreFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GenreFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__GenreClient<Genre>, Prisma__GenreClient<GenreGetPayload<T>>>

    /**
     * Find the first Genre that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GenreFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GenreFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__GenreClient<Genre>, Prisma__GenreClient<GenreGetPayload<T>>>

    /**
     * Count the number of Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreCountArgs} args - Arguments to filter Genres to count.
     * @example
     * // Count the number of Genres
     * const count = await prisma.genre.count({
     *   where: {
     *     // ... the filter for the Genres we want to count
     *   }
     * })
    **/
    count<T extends GenreCountArgs>(
      args?: Subset<T, GenreCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenreAggregateArgs>(args: Subset<T, GenreAggregateArgs>): PrismaPromise<GetGenreAggregateType<T>>

    /**
     * Group by Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenreGroupByArgs['orderBy'] }
        : { orderBy?: GenreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenreGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Genre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GenreClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    BookGenre<T extends BookGenreFindManyArgs = {}>(args?: Subset<T, BookGenreFindManyArgs>): CheckSelect<T, PrismaPromise<Array<BookGenre>>, PrismaPromise<Array<BookGenreGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Genre base type for findUnique actions
   */
  export type GenreFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * Filter, which Genre to fetch.
     * 
    **/
    where: GenreWhereUniqueInput
  }

  /**
   * Genre: findUnique
   */
  export interface GenreFindUniqueArgs extends GenreFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Genre base type for findFirst actions
   */
  export type GenreFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * Filter, which Genre to fetch.
     * 
    **/
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     * 
    **/
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genres.
     * 
    **/
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genres.
     * 
    **/
    distinct?: Enumerable<GenreScalarFieldEnum>
  }

  /**
   * Genre: findFirst
   */
  export interface GenreFindFirstArgs extends GenreFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Genre findMany
   */
  export type GenreFindManyArgs = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * Filter, which Genres to fetch.
     * 
    **/
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     * 
    **/
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Genres.
     * 
    **/
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GenreScalarFieldEnum>
  }


  /**
   * Genre create
   */
  export type GenreCreateArgs = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * The data needed to create a Genre.
     * 
    **/
    data: XOR<GenreCreateInput, GenreUncheckedCreateInput>
  }


  /**
   * Genre createMany
   */
  export type GenreCreateManyArgs = {
    /**
     * The data used to create many Genres.
     * 
    **/
    data: Enumerable<GenreCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Genre update
   */
  export type GenreUpdateArgs = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * The data needed to update a Genre.
     * 
    **/
    data: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
    /**
     * Choose, which Genre to update.
     * 
    **/
    where: GenreWhereUniqueInput
  }


  /**
   * Genre updateMany
   */
  export type GenreUpdateManyArgs = {
    /**
     * The data used to update Genres.
     * 
    **/
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyInput>
    /**
     * Filter which Genres to update
     * 
    **/
    where?: GenreWhereInput
  }


  /**
   * Genre upsert
   */
  export type GenreUpsertArgs = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * The filter to search for the Genre to update in case it exists.
     * 
    **/
    where: GenreWhereUniqueInput
    /**
     * In case the Genre found by the `where` argument doesn't exist, create a new Genre with this data.
     * 
    **/
    create: XOR<GenreCreateInput, GenreUncheckedCreateInput>
    /**
     * In case the Genre was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
  }


  /**
   * Genre delete
   */
  export type GenreDeleteArgs = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
    /**
     * Filter which Genre to delete.
     * 
    **/
    where: GenreWhereUniqueInput
  }


  /**
   * Genre deleteMany
   */
  export type GenreDeleteManyArgs = {
    /**
     * Filter which Genres to delete
     * 
    **/
    where?: GenreWhereInput
  }


  /**
   * Genre: findUniqueOrThrow
   */
  export type GenreFindUniqueOrThrowArgs = GenreFindUniqueArgsBase
      

  /**
   * Genre: findFirstOrThrow
   */
  export type GenreFindFirstOrThrowArgs = GenreFindFirstArgsBase
      

  /**
   * Genre without action
   */
  export type GenreArgs = {
    /**
     * Select specific fields to fetch from the Genre
     * 
    **/
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GenreInclude | null
  }



  /**
   * Model News
   */


  export type AggregateNews = {
    _count: NewsCountAggregateOutputType | null
    _avg: NewsAvgAggregateOutputType | null
    _sum: NewsSumAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  export type NewsAvgAggregateOutputType = {
    id: number | null
  }

  export type NewsSumAggregateOutputType = {
    id: bigint | null
  }

  export type NewsMinAggregateOutputType = {
    id: bigint | null
    title: string | null
    short_title: string | null
    description: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type NewsMaxAggregateOutputType = {
    id: bigint | null
    title: string | null
    short_title: string | null
    description: string | null
    created_at: Date | null
    update_at: Date | null
  }

  export type NewsCountAggregateOutputType = {
    id: number
    title: number
    short_title: number
    description: number
    created_at: number
    update_at: number
    _all: number
  }


  export type NewsAvgAggregateInputType = {
    id?: true
  }

  export type NewsSumAggregateInputType = {
    id?: true
  }

  export type NewsMinAggregateInputType = {
    id?: true
    title?: true
    short_title?: true
    description?: true
    created_at?: true
    update_at?: true
  }

  export type NewsMaxAggregateInputType = {
    id?: true
    title?: true
    short_title?: true
    description?: true
    created_at?: true
    update_at?: true
  }

  export type NewsCountAggregateInputType = {
    id?: true
    title?: true
    short_title?: true
    description?: true
    created_at?: true
    update_at?: true
    _all?: true
  }

  export type NewsAggregateArgs = {
    /**
     * Filter which News to aggregate.
     * 
    **/
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     * 
    **/
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned News
    **/
    _count?: true | NewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsMaxAggregateInputType
  }

  export type GetNewsAggregateType<T extends NewsAggregateArgs> = {
        [P in keyof T & keyof AggregateNews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNews[P]>
      : GetScalarType<T[P], AggregateNews[P]>
  }




  export type NewsGroupByArgs = {
    where?: NewsWhereInput
    orderBy?: Enumerable<NewsOrderByWithAggregationInput>
    by: Array<NewsScalarFieldEnum>
    having?: NewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsCountAggregateInputType | true
    _avg?: NewsAvgAggregateInputType
    _sum?: NewsSumAggregateInputType
    _min?: NewsMinAggregateInputType
    _max?: NewsMaxAggregateInputType
  }


  export type NewsGroupByOutputType = {
    id: bigint
    title: string
    short_title: string
    description: string
    created_at: Date
    update_at: Date
    _count: NewsCountAggregateOutputType | null
    _avg: NewsAvgAggregateOutputType | null
    _sum: NewsSumAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  type GetNewsGroupByPayload<T extends NewsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsGroupByOutputType[P]>
            : GetScalarType<T[P], NewsGroupByOutputType[P]>
        }
      >
    >


  export type NewsSelect = {
    id?: boolean
    title?: boolean
    short_title?: boolean
    description?: boolean
    created_at?: boolean
    update_at?: boolean
    ImageModel?: boolean | ImageModelFindManyArgs
    Comment?: boolean | CommentFindManyArgs
    _count?: boolean | NewsCountOutputTypeArgs
  }

  export type NewsInclude = {
    ImageModel?: boolean | ImageModelFindManyArgs
    Comment?: boolean | CommentFindManyArgs
    _count?: boolean | NewsCountOutputTypeArgs
  }

  export type NewsGetPayload<
    S extends boolean | null | undefined | NewsArgs,
    U = keyof S
      > = S extends true
        ? News
    : S extends undefined
    ? never
    : S extends NewsArgs | NewsFindManyArgs
    ?'include' extends U
    ? News  & {
    [P in TrueKeys<S['include']>]:
        P extends 'ImageModel' ? Array < ImageModelGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'Comment' ? Array < CommentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? NewsCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'ImageModel' ? Array < ImageModelGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'Comment' ? Array < CommentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? NewsCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof News ? News[P] : never
  } 
    : News
  : News


  type NewsCountArgs = Merge<
    Omit<NewsFindManyArgs, 'select' | 'include'> & {
      select?: NewsCountAggregateInputType | true
    }
  >

  export interface NewsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one News that matches the filter.
     * @param {NewsFindUniqueArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NewsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NewsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'News'> extends True ? CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>> : CheckSelect<T, Prisma__NewsClient<News | null >, Prisma__NewsClient<NewsGetPayload<T> | null >>

    /**
     * Find the first News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NewsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NewsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'News'> extends True ? CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>> : CheckSelect<T, Prisma__NewsClient<News | null >, Prisma__NewsClient<NewsGetPayload<T> | null >>

    /**
     * Find zero or more News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all News
     * const news = await prisma.news.findMany()
     * 
     * // Get first 10 News
     * const news = await prisma.news.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsWithIdOnly = await prisma.news.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NewsFindManyArgs>(
      args?: SelectSubset<T, NewsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<News>>, PrismaPromise<Array<NewsGetPayload<T>>>>

    /**
     * Create a News.
     * @param {NewsCreateArgs} args - Arguments to create a News.
     * @example
     * // Create one News
     * const News = await prisma.news.create({
     *   data: {
     *     // ... data to create a News
     *   }
     * })
     * 
    **/
    create<T extends NewsCreateArgs>(
      args: SelectSubset<T, NewsCreateArgs>
    ): CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>>

    /**
     * Create many News.
     *     @param {NewsCreateManyArgs} args - Arguments to create many News.
     *     @example
     *     // Create many News
     *     const news = await prisma.news.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NewsCreateManyArgs>(
      args?: SelectSubset<T, NewsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a News.
     * @param {NewsDeleteArgs} args - Arguments to delete one News.
     * @example
     * // Delete one News
     * const News = await prisma.news.delete({
     *   where: {
     *     // ... filter to delete one News
     *   }
     * })
     * 
    **/
    delete<T extends NewsDeleteArgs>(
      args: SelectSubset<T, NewsDeleteArgs>
    ): CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>>

    /**
     * Update one News.
     * @param {NewsUpdateArgs} args - Arguments to update one News.
     * @example
     * // Update one News
     * const news = await prisma.news.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NewsUpdateArgs>(
      args: SelectSubset<T, NewsUpdateArgs>
    ): CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>>

    /**
     * Delete zero or more News.
     * @param {NewsDeleteManyArgs} args - Arguments to filter News to delete.
     * @example
     * // Delete a few News
     * const { count } = await prisma.news.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NewsDeleteManyArgs>(
      args?: SelectSubset<T, NewsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many News
     * const news = await prisma.news.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NewsUpdateManyArgs>(
      args: SelectSubset<T, NewsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one News.
     * @param {NewsUpsertArgs} args - Arguments to update or create a News.
     * @example
     * // Update or create a News
     * const news = await prisma.news.upsert({
     *   create: {
     *     // ... data to create a News
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the News we want to update
     *   }
     * })
    **/
    upsert<T extends NewsUpsertArgs>(
      args: SelectSubset<T, NewsUpsertArgs>
    ): CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>>

    /**
     * Find one News that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {NewsFindUniqueOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NewsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, NewsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>>

    /**
     * Find the first News that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NewsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, NewsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>>

    /**
     * Count the number of News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCountArgs} args - Arguments to filter News to count.
     * @example
     * // Count the number of News
     * const count = await prisma.news.count({
     *   where: {
     *     // ... the filter for the News we want to count
     *   }
     * })
    **/
    count<T extends NewsCountArgs>(
      args?: Subset<T, NewsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsAggregateArgs>(args: Subset<T, NewsAggregateArgs>): PrismaPromise<GetNewsAggregateType<T>>

    /**
     * Group by News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsGroupByArgs['orderBy'] }
        : { orderBy?: NewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for News.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NewsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    ImageModel<T extends ImageModelFindManyArgs = {}>(args?: Subset<T, ImageModelFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ImageModel>>, PrismaPromise<Array<ImageModelGetPayload<T>>>>;

    Comment<T extends CommentFindManyArgs = {}>(args?: Subset<T, CommentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * News base type for findUnique actions
   */
  export type NewsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * Filter, which News to fetch.
     * 
    **/
    where: NewsWhereUniqueInput
  }

  /**
   * News: findUnique
   */
  export interface NewsFindUniqueArgs extends NewsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * News base type for findFirst actions
   */
  export type NewsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * Filter, which News to fetch.
     * 
    **/
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     * 
    **/
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for News.
     * 
    **/
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of News.
     * 
    **/
    distinct?: Enumerable<NewsScalarFieldEnum>
  }

  /**
   * News: findFirst
   */
  export interface NewsFindFirstArgs extends NewsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * News findMany
   */
  export type NewsFindManyArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * Filter, which News to fetch.
     * 
    **/
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     * 
    **/
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing News.
     * 
    **/
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NewsScalarFieldEnum>
  }


  /**
   * News create
   */
  export type NewsCreateArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * The data needed to create a News.
     * 
    **/
    data: XOR<NewsCreateInput, NewsUncheckedCreateInput>
  }


  /**
   * News createMany
   */
  export type NewsCreateManyArgs = {
    /**
     * The data used to create many News.
     * 
    **/
    data: Enumerable<NewsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * News update
   */
  export type NewsUpdateArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * The data needed to update a News.
     * 
    **/
    data: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
    /**
     * Choose, which News to update.
     * 
    **/
    where: NewsWhereUniqueInput
  }


  /**
   * News updateMany
   */
  export type NewsUpdateManyArgs = {
    /**
     * The data used to update News.
     * 
    **/
    data: XOR<NewsUpdateManyMutationInput, NewsUncheckedUpdateManyInput>
    /**
     * Filter which News to update
     * 
    **/
    where?: NewsWhereInput
  }


  /**
   * News upsert
   */
  export type NewsUpsertArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * The filter to search for the News to update in case it exists.
     * 
    **/
    where: NewsWhereUniqueInput
    /**
     * In case the News found by the `where` argument doesn't exist, create a new News with this data.
     * 
    **/
    create: XOR<NewsCreateInput, NewsUncheckedCreateInput>
    /**
     * In case the News was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
  }


  /**
   * News delete
   */
  export type NewsDeleteArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * Filter which News to delete.
     * 
    **/
    where: NewsWhereUniqueInput
  }


  /**
   * News deleteMany
   */
  export type NewsDeleteManyArgs = {
    /**
     * Filter which News to delete
     * 
    **/
    where?: NewsWhereInput
  }


  /**
   * News: findUniqueOrThrow
   */
  export type NewsFindUniqueOrThrowArgs = NewsFindUniqueArgsBase
      

  /**
   * News: findFirstOrThrow
   */
  export type NewsFindFirstOrThrowArgs = NewsFindFirstArgsBase
      

  /**
   * News without action
   */
  export type NewsArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
  }



  /**
   * Model Comment
   */


  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    newsId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    newsId: bigint | null
  }

  export type CommentMinAggregateOutputType = {
    id: bigint | null
    message: string | null
    userId: bigint | null
    newsId: bigint | null
  }

  export type CommentMaxAggregateOutputType = {
    id: bigint | null
    message: string | null
    userId: bigint | null
    newsId: bigint | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    message: number
    userId: number
    newsId: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    userId?: true
    newsId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    userId?: true
    newsId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    message?: true
    userId?: true
    newsId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    message?: true
    userId?: true
    newsId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    message?: true
    userId?: true
    newsId?: true
    _all?: true
  }

  export type CommentAggregateArgs = {
    /**
     * Filter which Comment to aggregate.
     * 
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs = {
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithAggregationInput>
    by: Array<CommentScalarFieldEnum>
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }


  export type CommentGroupByOutputType = {
    id: bigint
    message: string
    userId: bigint
    newsId: bigint
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect = {
    id?: boolean
    message?: boolean
    userId?: boolean
    newsId?: boolean
    User?: boolean | UserArgs
    News?: boolean | NewsArgs
  }

  export type CommentInclude = {
    User?: boolean | UserArgs
    News?: boolean | NewsArgs
  }

  export type CommentGetPayload<
    S extends boolean | null | undefined | CommentArgs,
    U = keyof S
      > = S extends true
        ? Comment
    : S extends undefined
    ? never
    : S extends CommentArgs | CommentFindManyArgs
    ?'include' extends U
    ? Comment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'News' ? NewsGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'News' ? NewsGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Comment ? Comment[P] : never
  } 
    : Comment
  : Comment


  type CommentCountArgs = Merge<
    Omit<CommentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }
  >

  export interface CommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comment'> extends True ? CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>> : CheckSelect<T, Prisma__CommentClient<Comment | null >, Prisma__CommentClient<CommentGetPayload<T> | null >>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comment'> extends True ? CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>> : CheckSelect<T, Prisma__CommentClient<Comment | null >, Prisma__CommentClient<CommentGetPayload<T> | null >>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs>(
      args?: SelectSubset<T, CommentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Comment>>, PrismaPromise<Array<CommentGetPayload<T>>>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs>(
      args: SelectSubset<T, CommentCreateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs>(
      args?: SelectSubset<T, CommentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs>(
      args: SelectSubset<T, CommentDeleteArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs>(
      args: SelectSubset<T, CommentUpdateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs>(
      args?: SelectSubset<T, CommentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs>(
      args: SelectSubset<T, CommentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs>(
      args: SelectSubset<T, CommentUpsertArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Find one Comment that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Find the first Comment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    News<T extends NewsArgs = {}>(args?: Subset<T, NewsArgs>): CheckSelect<T, Prisma__NewsClient<News | null >, Prisma__NewsClient<NewsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Comment base type for findUnique actions
   */
  export type CommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     * 
    **/
    where: CommentWhereUniqueInput
  }

  /**
   * Comment: findUnique
   */
  export interface CommentFindUniqueArgs extends CommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comment base type for findFirst actions
   */
  export type CommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     * 
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     * 
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     * 
    **/
    distinct?: Enumerable<CommentScalarFieldEnum>
  }

  /**
   * Comment: findFirst
   */
  export interface CommentFindFirstArgs extends CommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comments to fetch.
     * 
    **/
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     * 
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * The data needed to create a Comment.
     * 
    **/
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs = {
    /**
     * The data used to create many Comments.
     * 
    **/
    data: Enumerable<CommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * The data needed to update a Comment.
     * 
    **/
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     * 
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs = {
    /**
     * The data used to update Comments.
     * 
    **/
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     * 
    **/
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * The filter to search for the Comment to update in case it exists.
     * 
    **/
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     * 
    **/
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
    /**
     * Filter which Comment to delete.
     * 
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs = {
    /**
     * Filter which Comments to delete
     * 
    **/
    where?: CommentWhereInput
  }


  /**
   * Comment: findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs = CommentFindUniqueArgsBase
      

  /**
   * Comment: findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs = CommentFindFirstArgsBase
      

  /**
   * Comment without action
   */
  export type CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
     * 
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentInclude | null
  }



  /**
   * Model Response
   */


  export type AggregateResponse = {
    _count: ResponseCountAggregateOutputType | null
    _avg: ResponseAvgAggregateOutputType | null
    _sum: ResponseSumAggregateOutputType | null
    _min: ResponseMinAggregateOutputType | null
    _max: ResponseMaxAggregateOutputType | null
  }

  export type ResponseAvgAggregateOutputType = {
    id: number | null
    bookId: number | null
    userId: number | null
  }

  export type ResponseSumAggregateOutputType = {
    id: bigint | null
    bookId: bigint | null
    userId: bigint | null
  }

  export type ResponseMinAggregateOutputType = {
    id: bigint | null
    bookId: bigint | null
    userId: bigint | null
  }

  export type ResponseMaxAggregateOutputType = {
    id: bigint | null
    bookId: bigint | null
    userId: bigint | null
  }

  export type ResponseCountAggregateOutputType = {
    id: number
    bookId: number
    userId: number
    _all: number
  }


  export type ResponseAvgAggregateInputType = {
    id?: true
    bookId?: true
    userId?: true
  }

  export type ResponseSumAggregateInputType = {
    id?: true
    bookId?: true
    userId?: true
  }

  export type ResponseMinAggregateInputType = {
    id?: true
    bookId?: true
    userId?: true
  }

  export type ResponseMaxAggregateInputType = {
    id?: true
    bookId?: true
    userId?: true
  }

  export type ResponseCountAggregateInputType = {
    id?: true
    bookId?: true
    userId?: true
    _all?: true
  }

  export type ResponseAggregateArgs = {
    /**
     * Filter which Response to aggregate.
     * 
    **/
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     * 
    **/
    orderBy?: Enumerable<ResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Responses
    **/
    _count?: true | ResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResponseMaxAggregateInputType
  }

  export type GetResponseAggregateType<T extends ResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResponse[P]>
      : GetScalarType<T[P], AggregateResponse[P]>
  }




  export type ResponseGroupByArgs = {
    where?: ResponseWhereInput
    orderBy?: Enumerable<ResponseOrderByWithAggregationInput>
    by: Array<ResponseScalarFieldEnum>
    having?: ResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResponseCountAggregateInputType | true
    _avg?: ResponseAvgAggregateInputType
    _sum?: ResponseSumAggregateInputType
    _min?: ResponseMinAggregateInputType
    _max?: ResponseMaxAggregateInputType
  }


  export type ResponseGroupByOutputType = {
    id: bigint
    bookId: bigint
    userId: bigint
    _count: ResponseCountAggregateOutputType | null
    _avg: ResponseAvgAggregateOutputType | null
    _sum: ResponseSumAggregateOutputType | null
    _min: ResponseMinAggregateOutputType | null
    _max: ResponseMaxAggregateOutputType | null
  }

  type GetResponseGroupByPayload<T extends ResponseGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResponseGroupByOutputType[P]>
            : GetScalarType<T[P], ResponseGroupByOutputType[P]>
        }
      >
    >


  export type ResponseSelect = {
    id?: boolean
    bookId?: boolean
    userId?: boolean
    Book?: boolean | BookArgs
    User?: boolean | UserArgs
  }

  export type ResponseInclude = {
    Book?: boolean | BookArgs
    User?: boolean | UserArgs
  }

  export type ResponseGetPayload<
    S extends boolean | null | undefined | ResponseArgs,
    U = keyof S
      > = S extends true
        ? Response
    : S extends undefined
    ? never
    : S extends ResponseArgs | ResponseFindManyArgs
    ?'include' extends U
    ? Response  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Book' ? BookGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'User' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Book' ? BookGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'User' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Response ? Response[P] : never
  } 
    : Response
  : Response


  type ResponseCountArgs = Merge<
    Omit<ResponseFindManyArgs, 'select' | 'include'> & {
      select?: ResponseCountAggregateInputType | true
    }
  >

  export interface ResponseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Response that matches the filter.
     * @param {ResponseFindUniqueArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResponseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ResponseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Response'> extends True ? CheckSelect<T, Prisma__ResponseClient<Response>, Prisma__ResponseClient<ResponseGetPayload<T>>> : CheckSelect<T, Prisma__ResponseClient<Response | null >, Prisma__ResponseClient<ResponseGetPayload<T> | null >>

    /**
     * Find the first Response that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindFirstArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResponseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ResponseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Response'> extends True ? CheckSelect<T, Prisma__ResponseClient<Response>, Prisma__ResponseClient<ResponseGetPayload<T>>> : CheckSelect<T, Prisma__ResponseClient<Response | null >, Prisma__ResponseClient<ResponseGetPayload<T> | null >>

    /**
     * Find zero or more Responses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Responses
     * const responses = await prisma.response.findMany()
     * 
     * // Get first 10 Responses
     * const responses = await prisma.response.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const responseWithIdOnly = await prisma.response.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResponseFindManyArgs>(
      args?: SelectSubset<T, ResponseFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Response>>, PrismaPromise<Array<ResponseGetPayload<T>>>>

    /**
     * Create a Response.
     * @param {ResponseCreateArgs} args - Arguments to create a Response.
     * @example
     * // Create one Response
     * const Response = await prisma.response.create({
     *   data: {
     *     // ... data to create a Response
     *   }
     * })
     * 
    **/
    create<T extends ResponseCreateArgs>(
      args: SelectSubset<T, ResponseCreateArgs>
    ): CheckSelect<T, Prisma__ResponseClient<Response>, Prisma__ResponseClient<ResponseGetPayload<T>>>

    /**
     * Create many Responses.
     *     @param {ResponseCreateManyArgs} args - Arguments to create many Responses.
     *     @example
     *     // Create many Responses
     *     const response = await prisma.response.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResponseCreateManyArgs>(
      args?: SelectSubset<T, ResponseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Response.
     * @param {ResponseDeleteArgs} args - Arguments to delete one Response.
     * @example
     * // Delete one Response
     * const Response = await prisma.response.delete({
     *   where: {
     *     // ... filter to delete one Response
     *   }
     * })
     * 
    **/
    delete<T extends ResponseDeleteArgs>(
      args: SelectSubset<T, ResponseDeleteArgs>
    ): CheckSelect<T, Prisma__ResponseClient<Response>, Prisma__ResponseClient<ResponseGetPayload<T>>>

    /**
     * Update one Response.
     * @param {ResponseUpdateArgs} args - Arguments to update one Response.
     * @example
     * // Update one Response
     * const response = await prisma.response.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResponseUpdateArgs>(
      args: SelectSubset<T, ResponseUpdateArgs>
    ): CheckSelect<T, Prisma__ResponseClient<Response>, Prisma__ResponseClient<ResponseGetPayload<T>>>

    /**
     * Delete zero or more Responses.
     * @param {ResponseDeleteManyArgs} args - Arguments to filter Responses to delete.
     * @example
     * // Delete a few Responses
     * const { count } = await prisma.response.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResponseDeleteManyArgs>(
      args?: SelectSubset<T, ResponseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Responses
     * const response = await prisma.response.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResponseUpdateManyArgs>(
      args: SelectSubset<T, ResponseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Response.
     * @param {ResponseUpsertArgs} args - Arguments to update or create a Response.
     * @example
     * // Update or create a Response
     * const response = await prisma.response.upsert({
     *   create: {
     *     // ... data to create a Response
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Response we want to update
     *   }
     * })
    **/
    upsert<T extends ResponseUpsertArgs>(
      args: SelectSubset<T, ResponseUpsertArgs>
    ): CheckSelect<T, Prisma__ResponseClient<Response>, Prisma__ResponseClient<ResponseGetPayload<T>>>

    /**
     * Find one Response that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ResponseFindUniqueOrThrowArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResponseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ResponseFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ResponseClient<Response>, Prisma__ResponseClient<ResponseGetPayload<T>>>

    /**
     * Find the first Response that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseFindFirstOrThrowArgs} args - Arguments to find a Response
     * @example
     * // Get one Response
     * const response = await prisma.response.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResponseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ResponseFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ResponseClient<Response>, Prisma__ResponseClient<ResponseGetPayload<T>>>

    /**
     * Count the number of Responses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseCountArgs} args - Arguments to filter Responses to count.
     * @example
     * // Count the number of Responses
     * const count = await prisma.response.count({
     *   where: {
     *     // ... the filter for the Responses we want to count
     *   }
     * })
    **/
    count<T extends ResponseCountArgs>(
      args?: Subset<T, ResponseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Response.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResponseAggregateArgs>(args: Subset<T, ResponseAggregateArgs>): PrismaPromise<GetResponseAggregateType<T>>

    /**
     * Group by Response.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResponseGroupByArgs['orderBy'] }
        : { orderBy?: ResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResponseGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Response.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ResponseClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Book<T extends BookArgs = {}>(args?: Subset<T, BookArgs>): CheckSelect<T, Prisma__BookClient<Book | null >, Prisma__BookClient<BookGetPayload<T> | null >>;

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Response base type for findUnique actions
   */
  export type ResponseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * Filter, which Response to fetch.
     * 
    **/
    where: ResponseWhereUniqueInput
  }

  /**
   * Response: findUnique
   */
  export interface ResponseFindUniqueArgs extends ResponseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Response base type for findFirst actions
   */
  export type ResponseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * Filter, which Response to fetch.
     * 
    **/
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     * 
    **/
    orderBy?: Enumerable<ResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Responses.
     * 
    **/
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Responses.
     * 
    **/
    distinct?: Enumerable<ResponseScalarFieldEnum>
  }

  /**
   * Response: findFirst
   */
  export interface ResponseFindFirstArgs extends ResponseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Response findMany
   */
  export type ResponseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * Filter, which Responses to fetch.
     * 
    **/
    where?: ResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Responses to fetch.
     * 
    **/
    orderBy?: Enumerable<ResponseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Responses.
     * 
    **/
    cursor?: ResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Responses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Responses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ResponseScalarFieldEnum>
  }


  /**
   * Response create
   */
  export type ResponseCreateArgs = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * The data needed to create a Response.
     * 
    **/
    data: XOR<ResponseCreateInput, ResponseUncheckedCreateInput>
  }


  /**
   * Response createMany
   */
  export type ResponseCreateManyArgs = {
    /**
     * The data used to create many Responses.
     * 
    **/
    data: Enumerable<ResponseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Response update
   */
  export type ResponseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * The data needed to update a Response.
     * 
    **/
    data: XOR<ResponseUpdateInput, ResponseUncheckedUpdateInput>
    /**
     * Choose, which Response to update.
     * 
    **/
    where: ResponseWhereUniqueInput
  }


  /**
   * Response updateMany
   */
  export type ResponseUpdateManyArgs = {
    /**
     * The data used to update Responses.
     * 
    **/
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyInput>
    /**
     * Filter which Responses to update
     * 
    **/
    where?: ResponseWhereInput
  }


  /**
   * Response upsert
   */
  export type ResponseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * The filter to search for the Response to update in case it exists.
     * 
    **/
    where: ResponseWhereUniqueInput
    /**
     * In case the Response found by the `where` argument doesn't exist, create a new Response with this data.
     * 
    **/
    create: XOR<ResponseCreateInput, ResponseUncheckedCreateInput>
    /**
     * In case the Response was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ResponseUpdateInput, ResponseUncheckedUpdateInput>
  }


  /**
   * Response delete
   */
  export type ResponseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
    /**
     * Filter which Response to delete.
     * 
    **/
    where: ResponseWhereUniqueInput
  }


  /**
   * Response deleteMany
   */
  export type ResponseDeleteManyArgs = {
    /**
     * Filter which Responses to delete
     * 
    **/
    where?: ResponseWhereInput
  }


  /**
   * Response: findUniqueOrThrow
   */
  export type ResponseFindUniqueOrThrowArgs = ResponseFindUniqueArgsBase
      

  /**
   * Response: findFirstOrThrow
   */
  export type ResponseFindFirstOrThrowArgs = ResponseFindFirstArgsBase
      

  /**
   * Response without action
   */
  export type ResponseArgs = {
    /**
     * Select specific fields to fetch from the Response
     * 
    **/
    select?: ResponseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResponseInclude | null
  }



  /**
   * Model Booking
   */


  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    bookId: number | null
  }

  export type BookingSumAggregateOutputType = {
    id: bigint | null
    userId: bigint | null
    bookId: bigint | null
  }

  export type BookingMinAggregateOutputType = {
    id: bigint | null
    received_date: Date | null
    expiration_date: Date | null
    return_date: Date | null
    userId: bigint | null
    bookId: bigint | null
    isExtend: boolean | null
    isExtendApproved: boolean | null
  }

  export type BookingMaxAggregateOutputType = {
    id: bigint | null
    received_date: Date | null
    expiration_date: Date | null
    return_date: Date | null
    userId: bigint | null
    bookId: bigint | null
    isExtend: boolean | null
    isExtendApproved: boolean | null
  }

  export type BookingCountAggregateOutputType = {
    id: number
    received_date: number
    expiration_date: number
    return_date: number
    userId: number
    bookId: number
    isExtend: number
    isExtendApproved: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    id?: true
    userId?: true
    bookId?: true
  }

  export type BookingSumAggregateInputType = {
    id?: true
    userId?: true
    bookId?: true
  }

  export type BookingMinAggregateInputType = {
    id?: true
    received_date?: true
    expiration_date?: true
    return_date?: true
    userId?: true
    bookId?: true
    isExtend?: true
    isExtendApproved?: true
  }

  export type BookingMaxAggregateInputType = {
    id?: true
    received_date?: true
    expiration_date?: true
    return_date?: true
    userId?: true
    bookId?: true
    isExtend?: true
    isExtendApproved?: true
  }

  export type BookingCountAggregateInputType = {
    id?: true
    received_date?: true
    expiration_date?: true
    return_date?: true
    userId?: true
    bookId?: true
    isExtend?: true
    isExtendApproved?: true
    _all?: true
  }

  export type BookingAggregateArgs = {
    /**
     * Filter which Booking to aggregate.
     * 
    **/
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs = {
    where?: BookingWhereInput
    orderBy?: Enumerable<BookingOrderByWithAggregationInput>
    by: Array<BookingScalarFieldEnum>
    having?: BookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }


  export type BookingGroupByOutputType = {
    id: bigint
    received_date: Date
    expiration_date: Date
    return_date: Date
    userId: bigint
    bookId: bigint
    isExtend: boolean
    isExtendApproved: boolean
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type BookingSelect = {
    id?: boolean
    received_date?: boolean
    expiration_date?: boolean
    return_date?: boolean
    userId?: boolean
    bookId?: boolean
    isExtend?: boolean
    isExtendApproved?: boolean
    Book?: boolean | BookArgs
    User?: boolean | UserArgs
  }

  export type BookingInclude = {
    Book?: boolean | BookArgs
    User?: boolean | UserArgs
  }

  export type BookingGetPayload<
    S extends boolean | null | undefined | BookingArgs,
    U = keyof S
      > = S extends true
        ? Booking
    : S extends undefined
    ? never
    : S extends BookingArgs | BookingFindManyArgs
    ?'include' extends U
    ? Booking  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Book' ? BookGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'User' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Book' ? BookGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'User' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Booking ? Booking[P] : never
  } 
    : Booking
  : Booking


  type BookingCountArgs = Merge<
    Omit<BookingFindManyArgs, 'select' | 'include'> & {
      select?: BookingCountAggregateInputType | true
    }
  >

  export interface BookingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Booking that matches the filter.
     * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Booking'> extends True ? CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>> : CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Booking'> extends True ? CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>> : CheckSelect<T, Prisma__BookingClient<Booking | null >, Prisma__BookingClient<BookingGetPayload<T> | null >>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookingFindManyArgs>(
      args?: SelectSubset<T, BookingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Booking>>, PrismaPromise<Array<BookingGetPayload<T>>>>

    /**
     * Create a Booking.
     * @param {BookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
    **/
    create<T extends BookingCreateArgs>(
      args: SelectSubset<T, BookingCreateArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Create many Bookings.
     *     @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
     *     @example
     *     // Create many Bookings
     *     const booking = await prisma.booking.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookingCreateManyArgs>(
      args?: SelectSubset<T, BookingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Booking.
     * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
    **/
    delete<T extends BookingDeleteArgs>(
      args: SelectSubset<T, BookingDeleteArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Update one Booking.
     * @param {BookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookingUpdateArgs>(
      args: SelectSubset<T, BookingUpdateArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Delete zero or more Bookings.
     * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookingDeleteManyArgs>(
      args?: SelectSubset<T, BookingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookingUpdateManyArgs>(
      args: SelectSubset<T, BookingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Booking.
     * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
    **/
    upsert<T extends BookingUpsertArgs>(
      args: SelectSubset<T, BookingUpsertArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Find one Booking that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {BookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BookingFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Find the first Booking that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BookingFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__BookingClient<Booking>, Prisma__BookingClient<BookingGetPayload<T>>>

    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends BookingCountArgs>(
      args?: Subset<T, BookingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookingClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Book<T extends BookArgs = {}>(args?: Subset<T, BookArgs>): CheckSelect<T, Prisma__BookClient<Book | null >, Prisma__BookClient<BookGetPayload<T> | null >>;

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Booking base type for findUnique actions
   */
  export type BookingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Filter, which Booking to fetch.
     * 
    **/
    where: BookingWhereUniqueInput
  }

  /**
   * Booking: findUnique
   */
  export interface BookingFindUniqueArgs extends BookingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Booking base type for findFirst actions
   */
  export type BookingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Filter, which Booking to fetch.
     * 
    **/
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     * 
    **/
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     * 
    **/
    distinct?: Enumerable<BookingScalarFieldEnum>
  }

  /**
   * Booking: findFirst
   */
  export interface BookingFindFirstArgs extends BookingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Booking findMany
   */
  export type BookingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Filter, which Bookings to fetch.
     * 
    **/
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     * 
    **/
    orderBy?: Enumerable<BookingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookings.
     * 
    **/
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BookingScalarFieldEnum>
  }


  /**
   * Booking create
   */
  export type BookingCreateArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * The data needed to create a Booking.
     * 
    **/
    data: XOR<BookingCreateInput, BookingUncheckedCreateInput>
  }


  /**
   * Booking createMany
   */
  export type BookingCreateManyArgs = {
    /**
     * The data used to create many Bookings.
     * 
    **/
    data: Enumerable<BookingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Booking update
   */
  export type BookingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * The data needed to update a Booking.
     * 
    **/
    data: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
    /**
     * Choose, which Booking to update.
     * 
    **/
    where: BookingWhereUniqueInput
  }


  /**
   * Booking updateMany
   */
  export type BookingUpdateManyArgs = {
    /**
     * The data used to update Bookings.
     * 
    **/
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     * 
    **/
    where?: BookingWhereInput
  }


  /**
   * Booking upsert
   */
  export type BookingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * The filter to search for the Booking to update in case it exists.
     * 
    **/
    where: BookingWhereUniqueInput
    /**
     * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
     * 
    **/
    create: XOR<BookingCreateInput, BookingUncheckedCreateInput>
    /**
     * In case the Booking was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
  }


  /**
   * Booking delete
   */
  export type BookingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
    /**
     * Filter which Booking to delete.
     * 
    **/
    where: BookingWhereUniqueInput
  }


  /**
   * Booking deleteMany
   */
  export type BookingDeleteManyArgs = {
    /**
     * Filter which Bookings to delete
     * 
    **/
    where?: BookingWhereInput
  }


  /**
   * Booking: findUniqueOrThrow
   */
  export type BookingFindUniqueOrThrowArgs = BookingFindUniqueArgsBase
      

  /**
   * Booking: findFirstOrThrow
   */
  export type BookingFindFirstOrThrowArgs = BookingFindFirstArgsBase
      

  /**
   * Booking without action
   */
  export type BookingArgs = {
    /**
     * Select specific fields to fetch from the Booking
     * 
    **/
    select?: BookingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BookingInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AnketaScalarFieldEnum: {
    id: 'id',
    birthDay: 'birthDay',
    address: 'address',
    education: 'education',
    specialty: 'specialty',
    workStudy: 'workStudy'
  };

  export type AnketaScalarFieldEnum = (typeof AnketaScalarFieldEnum)[keyof typeof AnketaScalarFieldEnum]


  export const BookGenreScalarFieldEnum: {
    id: 'id',
    bookId: 'bookId',
    genreId: 'genreId'
  };

  export type BookGenreScalarFieldEnum = (typeof BookGenreScalarFieldEnum)[keyof typeof BookGenreScalarFieldEnum]


  export const BookScalarFieldEnum: {
    id: 'id',
    title: 'title',
    author: 'author',
    isbn: 'isbn',
    description: 'description',
    count: 'count',
    rating: 'rating',
    price: 'price',
    publishing_date: 'publishing_date',
    topic: 'topic'
  };

  export type BookScalarFieldEnum = (typeof BookScalarFieldEnum)[keyof typeof BookScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    id: 'id',
    received_date: 'received_date',
    expiration_date: 'expiration_date',
    return_date: 'return_date',
    userId: 'userId',
    bookId: 'bookId',
    isExtend: 'isExtend',
    isExtendApproved: 'isExtendApproved'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    message: 'message',
    userId: 'userId',
    newsId: 'newsId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const GenreScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type GenreScalarFieldEnum = (typeof GenreScalarFieldEnum)[keyof typeof GenreScalarFieldEnum]


  export const ImageModelScalarFieldEnum: {
    id: 'id',
    link: 'link',
    bookId: 'bookId',
    newsId: 'newsId'
  };

  export type ImageModelScalarFieldEnum = (typeof ImageModelScalarFieldEnum)[keyof typeof ImageModelScalarFieldEnum]


  export const NewsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    short_title: 'short_title',
    description: 'description',
    created_at: 'created_at',
    update_at: 'update_at'
  };

  export type NewsScalarFieldEnum = (typeof NewsScalarFieldEnum)[keyof typeof NewsScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ResponseScalarFieldEnum: {
    id: 'id',
    bookId: 'bookId',
    userId: 'userId'
  };

  export type ResponseScalarFieldEnum = (typeof ResponseScalarFieldEnum)[keyof typeof ResponseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    fatherName: 'fatherName',
    phoneNumber: 'phoneNumber',
    password: 'password',
    role: 'role',
    avatar: 'avatar',
    IIN: 'IIN',
    anketaId: 'anketaId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: BigIntFilter | bigint | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    fatherName?: StringNullableFilter | string | null
    phoneNumber?: StringFilter | string
    password?: StringFilter | string
    role?: EnumRoleFilter | Role
    avatar?: StringNullableFilter | string | null
    IIN?: StringFilter | string
    anketaId?: BigIntNullableFilter | bigint | number | null
    Booking?: BookingListRelationFilter
    Response?: ResponseListRelationFilter
    Anketa?: XOR<AnketaRelationFilter, AnketaWhereInput> | null
    Comment?: CommentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fatherName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    IIN?: SortOrder
    anketaId?: SortOrder
    Booking?: BookingOrderByRelationAggregateInput
    Response?: ResponseOrderByRelationAggregateInput
    Anketa?: AnketaOrderByWithRelationInput
    Comment?: CommentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: bigint | number
    phoneNumber?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fatherName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    IIN?: SortOrder
    anketaId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    fatherName?: StringNullableWithAggregatesFilter | string | null
    phoneNumber?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    role?: EnumRoleWithAggregatesFilter | Role
    avatar?: StringNullableWithAggregatesFilter | string | null
    IIN?: StringWithAggregatesFilter | string
    anketaId?: BigIntNullableWithAggregatesFilter | bigint | number | null
  }

  export type AnketaWhereInput = {
    AND?: Enumerable<AnketaWhereInput>
    OR?: Enumerable<AnketaWhereInput>
    NOT?: Enumerable<AnketaWhereInput>
    id?: BigIntFilter | bigint | number
    birthDay?: DateTimeFilter | Date | string
    address?: StringFilter | string
    education?: StringFilter | string
    specialty?: StringFilter | string
    workStudy?: StringFilter | string
    User?: UserListRelationFilter
  }

  export type AnketaOrderByWithRelationInput = {
    id?: SortOrder
    birthDay?: SortOrder
    address?: SortOrder
    education?: SortOrder
    specialty?: SortOrder
    workStudy?: SortOrder
    User?: UserOrderByRelationAggregateInput
  }

  export type AnketaWhereUniqueInput = {
    id?: bigint | number
  }

  export type AnketaOrderByWithAggregationInput = {
    id?: SortOrder
    birthDay?: SortOrder
    address?: SortOrder
    education?: SortOrder
    specialty?: SortOrder
    workStudy?: SortOrder
    _count?: AnketaCountOrderByAggregateInput
    _avg?: AnketaAvgOrderByAggregateInput
    _max?: AnketaMaxOrderByAggregateInput
    _min?: AnketaMinOrderByAggregateInput
    _sum?: AnketaSumOrderByAggregateInput
  }

  export type AnketaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AnketaScalarWhereWithAggregatesInput>
    OR?: Enumerable<AnketaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AnketaScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    birthDay?: DateTimeWithAggregatesFilter | Date | string
    address?: StringWithAggregatesFilter | string
    education?: StringWithAggregatesFilter | string
    specialty?: StringWithAggregatesFilter | string
    workStudy?: StringWithAggregatesFilter | string
  }

  export type ImageModelWhereInput = {
    AND?: Enumerable<ImageModelWhereInput>
    OR?: Enumerable<ImageModelWhereInput>
    NOT?: Enumerable<ImageModelWhereInput>
    id?: BigIntFilter | bigint | number
    link?: StringFilter | string
    bookId?: BigIntNullableFilter | bigint | number | null
    newsId?: BigIntNullableFilter | bigint | number | null
    Book?: XOR<BookRelationFilter, BookWhereInput> | null
    News?: XOR<NewsRelationFilter, NewsWhereInput> | null
  }

  export type ImageModelOrderByWithRelationInput = {
    id?: SortOrder
    link?: SortOrder
    bookId?: SortOrder
    newsId?: SortOrder
    Book?: BookOrderByWithRelationInput
    News?: NewsOrderByWithRelationInput
  }

  export type ImageModelWhereUniqueInput = {
    id?: bigint | number
  }

  export type ImageModelOrderByWithAggregationInput = {
    id?: SortOrder
    link?: SortOrder
    bookId?: SortOrder
    newsId?: SortOrder
    _count?: ImageModelCountOrderByAggregateInput
    _avg?: ImageModelAvgOrderByAggregateInput
    _max?: ImageModelMaxOrderByAggregateInput
    _min?: ImageModelMinOrderByAggregateInput
    _sum?: ImageModelSumOrderByAggregateInput
  }

  export type ImageModelScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ImageModelScalarWhereWithAggregatesInput>
    OR?: Enumerable<ImageModelScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ImageModelScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    link?: StringWithAggregatesFilter | string
    bookId?: BigIntNullableWithAggregatesFilter | bigint | number | null
    newsId?: BigIntNullableWithAggregatesFilter | bigint | number | null
  }

  export type BookWhereInput = {
    AND?: Enumerable<BookWhereInput>
    OR?: Enumerable<BookWhereInput>
    NOT?: Enumerable<BookWhereInput>
    id?: BigIntFilter | bigint | number
    title?: StringFilter | string
    author?: StringFilter | string
    isbn?: StringFilter | string
    description?: StringFilter | string
    count?: IntFilter | number
    rating?: IntFilter | number
    price?: IntFilter | number
    publishing_date?: DateTimeFilter | Date | string
    topic?: StringFilter | string
    ImageModel?: ImageModelListRelationFilter
    BookGenre?: BookGenreListRelationFilter
    Booking?: BookingListRelationFilter
    Response?: ResponseListRelationFilter
  }

  export type BookOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    isbn?: SortOrder
    description?: SortOrder
    count?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    publishing_date?: SortOrder
    topic?: SortOrder
    ImageModel?: ImageModelOrderByRelationAggregateInput
    BookGenre?: BookGenreOrderByRelationAggregateInput
    Booking?: BookingOrderByRelationAggregateInput
    Response?: ResponseOrderByRelationAggregateInput
  }

  export type BookWhereUniqueInput = {
    id?: bigint | number
  }

  export type BookOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    isbn?: SortOrder
    description?: SortOrder
    count?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    publishing_date?: SortOrder
    topic?: SortOrder
    _count?: BookCountOrderByAggregateInput
    _avg?: BookAvgOrderByAggregateInput
    _max?: BookMaxOrderByAggregateInput
    _min?: BookMinOrderByAggregateInput
    _sum?: BookSumOrderByAggregateInput
  }

  export type BookScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    title?: StringWithAggregatesFilter | string
    author?: StringWithAggregatesFilter | string
    isbn?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    count?: IntWithAggregatesFilter | number
    rating?: IntWithAggregatesFilter | number
    price?: IntWithAggregatesFilter | number
    publishing_date?: DateTimeWithAggregatesFilter | Date | string
    topic?: StringWithAggregatesFilter | string
  }

  export type BookGenreWhereInput = {
    AND?: Enumerable<BookGenreWhereInput>
    OR?: Enumerable<BookGenreWhereInput>
    NOT?: Enumerable<BookGenreWhereInput>
    id?: BigIntFilter | bigint | number
    bookId?: BigIntFilter | bigint | number
    genreId?: BigIntFilter | bigint | number
    Book?: XOR<BookRelationFilter, BookWhereInput>
    Genre?: XOR<GenreRelationFilter, GenreWhereInput>
  }

  export type BookGenreOrderByWithRelationInput = {
    id?: SortOrder
    bookId?: SortOrder
    genreId?: SortOrder
    Book?: BookOrderByWithRelationInput
    Genre?: GenreOrderByWithRelationInput
  }

  export type BookGenreWhereUniqueInput = {
    id?: bigint | number
  }

  export type BookGenreOrderByWithAggregationInput = {
    id?: SortOrder
    bookId?: SortOrder
    genreId?: SortOrder
    _count?: BookGenreCountOrderByAggregateInput
    _avg?: BookGenreAvgOrderByAggregateInput
    _max?: BookGenreMaxOrderByAggregateInput
    _min?: BookGenreMinOrderByAggregateInput
    _sum?: BookGenreSumOrderByAggregateInput
  }

  export type BookGenreScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookGenreScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookGenreScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookGenreScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    bookId?: BigIntWithAggregatesFilter | bigint | number
    genreId?: BigIntWithAggregatesFilter | bigint | number
  }

  export type GenreWhereInput = {
    AND?: Enumerable<GenreWhereInput>
    OR?: Enumerable<GenreWhereInput>
    NOT?: Enumerable<GenreWhereInput>
    id?: BigIntFilter | bigint | number
    name?: StringFilter | string
    BookGenre?: BookGenreListRelationFilter
  }

  export type GenreOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    BookGenre?: BookGenreOrderByRelationAggregateInput
  }

  export type GenreWhereUniqueInput = {
    id?: bigint | number
  }

  export type GenreOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: GenreCountOrderByAggregateInput
    _avg?: GenreAvgOrderByAggregateInput
    _max?: GenreMaxOrderByAggregateInput
    _min?: GenreMinOrderByAggregateInput
    _sum?: GenreSumOrderByAggregateInput
  }

  export type GenreScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GenreScalarWhereWithAggregatesInput>
    OR?: Enumerable<GenreScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GenreScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    name?: StringWithAggregatesFilter | string
  }

  export type NewsWhereInput = {
    AND?: Enumerable<NewsWhereInput>
    OR?: Enumerable<NewsWhereInput>
    NOT?: Enumerable<NewsWhereInput>
    id?: BigIntFilter | bigint | number
    title?: StringFilter | string
    short_title?: StringFilter | string
    description?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    update_at?: DateTimeFilter | Date | string
    ImageModel?: ImageModelListRelationFilter
    Comment?: CommentListRelationFilter
  }

  export type NewsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    short_title?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    ImageModel?: ImageModelOrderByRelationAggregateInput
    Comment?: CommentOrderByRelationAggregateInput
  }

  export type NewsWhereUniqueInput = {
    id?: bigint | number
  }

  export type NewsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    short_title?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
    _count?: NewsCountOrderByAggregateInput
    _avg?: NewsAvgOrderByAggregateInput
    _max?: NewsMaxOrderByAggregateInput
    _min?: NewsMinOrderByAggregateInput
    _sum?: NewsSumOrderByAggregateInput
  }

  export type NewsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NewsScalarWhereWithAggregatesInput>
    OR?: Enumerable<NewsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NewsScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    title?: StringWithAggregatesFilter | string
    short_title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    update_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CommentWhereInput = {
    AND?: Enumerable<CommentWhereInput>
    OR?: Enumerable<CommentWhereInput>
    NOT?: Enumerable<CommentWhereInput>
    id?: BigIntFilter | bigint | number
    message?: StringFilter | string
    userId?: BigIntFilter | bigint | number
    newsId?: BigIntFilter | bigint | number
    User?: XOR<UserRelationFilter, UserWhereInput>
    News?: XOR<NewsRelationFilter, NewsWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    newsId?: SortOrder
    User?: UserOrderByWithRelationInput
    News?: NewsOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = {
    id?: bigint | number
  }

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    newsId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommentScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    message?: StringWithAggregatesFilter | string
    userId?: BigIntWithAggregatesFilter | bigint | number
    newsId?: BigIntWithAggregatesFilter | bigint | number
  }

  export type ResponseWhereInput = {
    AND?: Enumerable<ResponseWhereInput>
    OR?: Enumerable<ResponseWhereInput>
    NOT?: Enumerable<ResponseWhereInput>
    id?: BigIntFilter | bigint | number
    bookId?: BigIntFilter | bigint | number
    userId?: BigIntFilter | bigint | number
    Book?: XOR<BookRelationFilter, BookWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ResponseOrderByWithRelationInput = {
    id?: SortOrder
    bookId?: SortOrder
    userId?: SortOrder
    Book?: BookOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type ResponseWhereUniqueInput = {
    id?: bigint | number
  }

  export type ResponseOrderByWithAggregationInput = {
    id?: SortOrder
    bookId?: SortOrder
    userId?: SortOrder
    _count?: ResponseCountOrderByAggregateInput
    _avg?: ResponseAvgOrderByAggregateInput
    _max?: ResponseMaxOrderByAggregateInput
    _min?: ResponseMinOrderByAggregateInput
    _sum?: ResponseSumOrderByAggregateInput
  }

  export type ResponseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ResponseScalarWhereWithAggregatesInput>
    OR?: Enumerable<ResponseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ResponseScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    bookId?: BigIntWithAggregatesFilter | bigint | number
    userId?: BigIntWithAggregatesFilter | bigint | number
  }

  export type BookingWhereInput = {
    AND?: Enumerable<BookingWhereInput>
    OR?: Enumerable<BookingWhereInput>
    NOT?: Enumerable<BookingWhereInput>
    id?: BigIntFilter | bigint | number
    received_date?: DateTimeFilter | Date | string
    expiration_date?: DateTimeFilter | Date | string
    return_date?: DateTimeFilter | Date | string
    userId?: BigIntFilter | bigint | number
    bookId?: BigIntFilter | bigint | number
    isExtend?: BoolFilter | boolean
    isExtendApproved?: BoolFilter | boolean
    Book?: XOR<BookRelationFilter, BookWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BookingOrderByWithRelationInput = {
    id?: SortOrder
    received_date?: SortOrder
    expiration_date?: SortOrder
    return_date?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
    isExtend?: SortOrder
    isExtendApproved?: SortOrder
    Book?: BookOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type BookingWhereUniqueInput = {
    id?: bigint | number
  }

  export type BookingOrderByWithAggregationInput = {
    id?: SortOrder
    received_date?: SortOrder
    expiration_date?: SortOrder
    return_date?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
    isExtend?: SortOrder
    isExtendApproved?: SortOrder
    _count?: BookingCountOrderByAggregateInput
    _avg?: BookingAvgOrderByAggregateInput
    _max?: BookingMaxOrderByAggregateInput
    _min?: BookingMinOrderByAggregateInput
    _sum?: BookingSumOrderByAggregateInput
  }

  export type BookingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookingScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookingScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    received_date?: DateTimeWithAggregatesFilter | Date | string
    expiration_date?: DateTimeWithAggregatesFilter | Date | string
    return_date?: DateTimeWithAggregatesFilter | Date | string
    userId?: BigIntWithAggregatesFilter | bigint | number
    bookId?: BigIntWithAggregatesFilter | bigint | number
    isExtend?: BoolWithAggregatesFilter | boolean
    isExtendApproved?: BoolWithAggregatesFilter | boolean
  }

  export type UserCreateInput = {
    id?: bigint | number
    firstName: string
    lastName: string
    fatherName?: string | null
    phoneNumber: string
    password: string
    role?: Role
    avatar?: string | null
    IIN: string
    Booking?: BookingCreateNestedManyWithoutUserInput
    Response?: ResponseCreateNestedManyWithoutUserInput
    Anketa?: AnketaCreateNestedOneWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: bigint | number
    firstName: string
    lastName: string
    fatherName?: string | null
    phoneNumber: string
    password: string
    role?: Role
    avatar?: string | null
    IIN: string
    anketaId?: bigint | number | null
    Booking?: BookingUncheckedCreateNestedManyWithoutUserInput
    Response?: ResponseUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
    Booking?: BookingUpdateManyWithoutUserNestedInput
    Response?: ResponseUpdateManyWithoutUserNestedInput
    Anketa?: AnketaUpdateOneWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
    anketaId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    Booking?: BookingUncheckedUpdateManyWithoutUserNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: bigint | number
    firstName: string
    lastName: string
    fatherName?: string | null
    phoneNumber: string
    password: string
    role?: Role
    avatar?: string | null
    IIN: string
    anketaId?: bigint | number | null
  }

  export type UserUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
    anketaId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type AnketaCreateInput = {
    id?: bigint | number
    birthDay: Date | string
    address: string
    education: string
    specialty: string
    workStudy: string
    User?: UserCreateNestedManyWithoutAnketaInput
  }

  export type AnketaUncheckedCreateInput = {
    id?: bigint | number
    birthDay: Date | string
    address: string
    education: string
    specialty: string
    workStudy: string
    User?: UserUncheckedCreateNestedManyWithoutAnketaInput
  }

  export type AnketaUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    birthDay?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    workStudy?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateManyWithoutAnketaNestedInput
  }

  export type AnketaUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    birthDay?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    workStudy?: StringFieldUpdateOperationsInput | string
    User?: UserUncheckedUpdateManyWithoutAnketaNestedInput
  }

  export type AnketaCreateManyInput = {
    id?: bigint | number
    birthDay: Date | string
    address: string
    education: string
    specialty: string
    workStudy: string
  }

  export type AnketaUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    birthDay?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    workStudy?: StringFieldUpdateOperationsInput | string
  }

  export type AnketaUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    birthDay?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    workStudy?: StringFieldUpdateOperationsInput | string
  }

  export type ImageModelCreateInput = {
    id?: bigint | number
    link: string
    Book?: BookCreateNestedOneWithoutImageModelInput
    News?: NewsCreateNestedOneWithoutImageModelInput
  }

  export type ImageModelUncheckedCreateInput = {
    id?: bigint | number
    link: string
    bookId?: bigint | number | null
    newsId?: bigint | number | null
  }

  export type ImageModelUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    link?: StringFieldUpdateOperationsInput | string
    Book?: BookUpdateOneWithoutImageModelNestedInput
    News?: NewsUpdateOneWithoutImageModelNestedInput
  }

  export type ImageModelUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    link?: StringFieldUpdateOperationsInput | string
    bookId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    newsId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ImageModelCreateManyInput = {
    id?: bigint | number
    link: string
    bookId?: bigint | number | null
    newsId?: bigint | number | null
  }

  export type ImageModelUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    link?: StringFieldUpdateOperationsInput | string
  }

  export type ImageModelUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    link?: StringFieldUpdateOperationsInput | string
    bookId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    newsId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type BookCreateInput = {
    id?: bigint | number
    title: string
    author: string
    isbn: string
    description: string
    count: number
    rating: number
    price: number
    publishing_date: Date | string
    topic: string
    ImageModel?: ImageModelCreateNestedManyWithoutBookInput
    BookGenre?: BookGenreCreateNestedManyWithoutBookInput
    Booking?: BookingCreateNestedManyWithoutBookInput
    Response?: ResponseCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateInput = {
    id?: bigint | number
    title: string
    author: string
    isbn: string
    description: string
    count: number
    rating: number
    price: number
    publishing_date: Date | string
    topic: string
    ImageModel?: ImageModelUncheckedCreateNestedManyWithoutBookInput
    BookGenre?: BookGenreUncheckedCreateNestedManyWithoutBookInput
    Booking?: BookingUncheckedCreateNestedManyWithoutBookInput
    Response?: ResponseUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    publishing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    ImageModel?: ImageModelUpdateManyWithoutBookNestedInput
    BookGenre?: BookGenreUpdateManyWithoutBookNestedInput
    Booking?: BookingUpdateManyWithoutBookNestedInput
    Response?: ResponseUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    publishing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    ImageModel?: ImageModelUncheckedUpdateManyWithoutBookNestedInput
    BookGenre?: BookGenreUncheckedUpdateManyWithoutBookNestedInput
    Booking?: BookingUncheckedUpdateManyWithoutBookNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutBookNestedInput
  }

  export type BookCreateManyInput = {
    id?: bigint | number
    title: string
    author: string
    isbn: string
    description: string
    count: number
    rating: number
    price: number
    publishing_date: Date | string
    topic: string
  }

  export type BookUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    publishing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
  }

  export type BookUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    publishing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
  }

  export type BookGenreCreateInput = {
    id?: bigint | number
    Book: BookCreateNestedOneWithoutBookGenreInput
    Genre: GenreCreateNestedOneWithoutBookGenreInput
  }

  export type BookGenreUncheckedCreateInput = {
    id?: bigint | number
    bookId: bigint | number
    genreId: bigint | number
  }

  export type BookGenreUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Book?: BookUpdateOneRequiredWithoutBookGenreNestedInput
    Genre?: GenreUpdateOneRequiredWithoutBookGenreNestedInput
  }

  export type BookGenreUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    bookId?: BigIntFieldUpdateOperationsInput | bigint | number
    genreId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type BookGenreCreateManyInput = {
    id?: bigint | number
    bookId: bigint | number
    genreId: bigint | number
  }

  export type BookGenreUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type BookGenreUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    bookId?: BigIntFieldUpdateOperationsInput | bigint | number
    genreId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type GenreCreateInput = {
    id?: bigint | number
    name: string
    BookGenre?: BookGenreCreateNestedManyWithoutGenreInput
  }

  export type GenreUncheckedCreateInput = {
    id?: bigint | number
    name: string
    BookGenre?: BookGenreUncheckedCreateNestedManyWithoutGenreInput
  }

  export type GenreUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    BookGenre?: BookGenreUpdateManyWithoutGenreNestedInput
  }

  export type GenreUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    BookGenre?: BookGenreUncheckedUpdateManyWithoutGenreNestedInput
  }

  export type GenreCreateManyInput = {
    id?: bigint | number
    name: string
  }

  export type GenreUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenreUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type NewsCreateInput = {
    id?: bigint | number
    title: string
    short_title: string
    description: string
    created_at: Date | string
    update_at: Date | string
    ImageModel?: ImageModelCreateNestedManyWithoutNewsInput
    Comment?: CommentCreateNestedManyWithoutNewsInput
  }

  export type NewsUncheckedCreateInput = {
    id?: bigint | number
    title: string
    short_title: string
    description: string
    created_at: Date | string
    update_at: Date | string
    ImageModel?: ImageModelUncheckedCreateNestedManyWithoutNewsInput
    Comment?: CommentUncheckedCreateNestedManyWithoutNewsInput
  }

  export type NewsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    short_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ImageModel?: ImageModelUpdateManyWithoutNewsNestedInput
    Comment?: CommentUpdateManyWithoutNewsNestedInput
  }

  export type NewsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    short_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ImageModel?: ImageModelUncheckedUpdateManyWithoutNewsNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutNewsNestedInput
  }

  export type NewsCreateManyInput = {
    id?: bigint | number
    title: string
    short_title: string
    description: string
    created_at: Date | string
    update_at: Date | string
  }

  export type NewsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    short_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    short_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    id?: bigint | number
    message: string
    User: UserCreateNestedOneWithoutCommentInput
    News: NewsCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: bigint | number
    message: string
    userId: bigint | number
    newsId: bigint | number
  }

  export type CommentUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutCommentNestedInput
    News?: NewsUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    newsId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CommentCreateManyInput = {
    id?: bigint | number
    message: string
    userId: bigint | number
    newsId: bigint | number
  }

  export type CommentUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    newsId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ResponseCreateInput = {
    id?: bigint | number
    Book: BookCreateNestedOneWithoutResponseInput
    User: UserCreateNestedOneWithoutResponseInput
  }

  export type ResponseUncheckedCreateInput = {
    id?: bigint | number
    bookId: bigint | number
    userId: bigint | number
  }

  export type ResponseUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Book?: BookUpdateOneRequiredWithoutResponseNestedInput
    User?: UserUpdateOneRequiredWithoutResponseNestedInput
  }

  export type ResponseUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    bookId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ResponseCreateManyInput = {
    id?: bigint | number
    bookId: bigint | number
    userId: bigint | number
  }

  export type ResponseUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ResponseUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    bookId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type BookingCreateInput = {
    id?: bigint | number
    received_date: Date | string
    expiration_date: Date | string
    return_date: Date | string
    isExtend?: boolean
    isExtendApproved?: boolean
    Book: BookCreateNestedOneWithoutBookingInput
    User: UserCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateInput = {
    id?: bigint | number
    received_date: Date | string
    expiration_date: Date | string
    return_date: Date | string
    userId: bigint | number
    bookId: bigint | number
    isExtend?: boolean
    isExtendApproved?: boolean
  }

  export type BookingUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    isExtend?: BoolFieldUpdateOperationsInput | boolean
    isExtendApproved?: BoolFieldUpdateOperationsInput | boolean
    Book?: BookUpdateOneRequiredWithoutBookingNestedInput
    User?: UserUpdateOneRequiredWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    bookId?: BigIntFieldUpdateOperationsInput | bigint | number
    isExtend?: BoolFieldUpdateOperationsInput | boolean
    isExtendApproved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BookingCreateManyInput = {
    id?: bigint | number
    received_date: Date | string
    expiration_date: Date | string
    return_date: Date | string
    userId: bigint | number
    bookId: bigint | number
    isExtend?: boolean
    isExtendApproved?: boolean
  }

  export type BookingUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    isExtend?: BoolFieldUpdateOperationsInput | boolean
    isExtendApproved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BookingUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    bookId?: BigIntFieldUpdateOperationsInput | bigint | number
    isExtend?: BoolFieldUpdateOperationsInput | boolean
    isExtendApproved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type BigIntNullableFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableFilter | bigint | number | null
  }

  export type BookingListRelationFilter = {
    every?: BookingWhereInput
    some?: BookingWhereInput
    none?: BookingWhereInput
  }

  export type ResponseListRelationFilter = {
    every?: ResponseWhereInput
    some?: ResponseWhereInput
    none?: ResponseWhereInput
  }

  export type AnketaRelationFilter = {
    is?: AnketaWhereInput | null
    isNot?: AnketaWhereInput | null
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type BookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fatherName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    IIN?: SortOrder
    anketaId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    anketaId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fatherName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    IIN?: SortOrder
    anketaId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    fatherName?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    IIN?: SortOrder
    anketaId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    anketaId?: SortOrder
  }

  export type BigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type BigIntNullableWithAggregatesFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableWithAggregatesFilter | bigint | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedBigIntNullableFilter
    _min?: NestedBigIntNullableFilter
    _max?: NestedBigIntNullableFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnketaCountOrderByAggregateInput = {
    id?: SortOrder
    birthDay?: SortOrder
    address?: SortOrder
    education?: SortOrder
    specialty?: SortOrder
    workStudy?: SortOrder
  }

  export type AnketaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AnketaMaxOrderByAggregateInput = {
    id?: SortOrder
    birthDay?: SortOrder
    address?: SortOrder
    education?: SortOrder
    specialty?: SortOrder
    workStudy?: SortOrder
  }

  export type AnketaMinOrderByAggregateInput = {
    id?: SortOrder
    birthDay?: SortOrder
    address?: SortOrder
    education?: SortOrder
    specialty?: SortOrder
    workStudy?: SortOrder
  }

  export type AnketaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BookRelationFilter = {
    is?: BookWhereInput | null
    isNot?: BookWhereInput | null
  }

  export type NewsRelationFilter = {
    is?: NewsWhereInput
    isNot?: NewsWhereInput
  }

  export type ImageModelCountOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    bookId?: SortOrder
    newsId?: SortOrder
  }

  export type ImageModelAvgOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    newsId?: SortOrder
  }

  export type ImageModelMaxOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    bookId?: SortOrder
    newsId?: SortOrder
  }

  export type ImageModelMinOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    bookId?: SortOrder
    newsId?: SortOrder
  }

  export type ImageModelSumOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    newsId?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type ImageModelListRelationFilter = {
    every?: ImageModelWhereInput
    some?: ImageModelWhereInput
    none?: ImageModelWhereInput
  }

  export type BookGenreListRelationFilter = {
    every?: BookGenreWhereInput
    some?: BookGenreWhereInput
    none?: BookGenreWhereInput
  }

  export type ImageModelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookGenreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    isbn?: SortOrder
    description?: SortOrder
    count?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    publishing_date?: SortOrder
    topic?: SortOrder
  }

  export type BookAvgOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    rating?: SortOrder
    price?: SortOrder
  }

  export type BookMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    isbn?: SortOrder
    description?: SortOrder
    count?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    publishing_date?: SortOrder
    topic?: SortOrder
  }

  export type BookMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    author?: SortOrder
    isbn?: SortOrder
    description?: SortOrder
    count?: SortOrder
    rating?: SortOrder
    price?: SortOrder
    publishing_date?: SortOrder
    topic?: SortOrder
  }

  export type BookSumOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    rating?: SortOrder
    price?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type GenreRelationFilter = {
    is?: GenreWhereInput
    isNot?: GenreWhereInput
  }

  export type BookGenreCountOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    genreId?: SortOrder
  }

  export type BookGenreAvgOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    genreId?: SortOrder
  }

  export type BookGenreMaxOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    genreId?: SortOrder
  }

  export type BookGenreMinOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    genreId?: SortOrder
  }

  export type BookGenreSumOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    genreId?: SortOrder
  }

  export type GenreCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenreAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GenreMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenreMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenreSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NewsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    short_title?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type NewsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NewsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    short_title?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type NewsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    short_title?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    update_at?: SortOrder
  }

  export type NewsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    newsId?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    newsId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    newsId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    userId?: SortOrder
    newsId?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    newsId?: SortOrder
  }

  export type ResponseCountOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    userId?: SortOrder
  }

  export type ResponseAvgOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    userId?: SortOrder
  }

  export type ResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    userId?: SortOrder
  }

  export type ResponseMinOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    userId?: SortOrder
  }

  export type ResponseSumOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    userId?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type BookingCountOrderByAggregateInput = {
    id?: SortOrder
    received_date?: SortOrder
    expiration_date?: SortOrder
    return_date?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
    isExtend?: SortOrder
    isExtendApproved?: SortOrder
  }

  export type BookingAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type BookingMaxOrderByAggregateInput = {
    id?: SortOrder
    received_date?: SortOrder
    expiration_date?: SortOrder
    return_date?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
    isExtend?: SortOrder
    isExtendApproved?: SortOrder
  }

  export type BookingMinOrderByAggregateInput = {
    id?: SortOrder
    received_date?: SortOrder
    expiration_date?: SortOrder
    return_date?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
    isExtend?: SortOrder
    isExtendApproved?: SortOrder
  }

  export type BookingSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bookId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type BookingCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type ResponseCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutUserInput>, Enumerable<ResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutUserInput>
    createMany?: ResponseCreateManyUserInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type AnketaCreateNestedOneWithoutUserInput = {
    create?: XOR<AnketaCreateWithoutUserInput, AnketaUncheckedCreateWithoutUserInput>
    connectOrCreate?: AnketaCreateOrConnectWithoutUserInput
    connect?: AnketaWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type BookingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type ResponseUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutUserInput>, Enumerable<ResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutUserInput>
    createMany?: ResponseCreateManyUserInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type BookingUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type ResponseUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutUserInput>, Enumerable<ResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ResponseCreateManyUserInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type AnketaUpdateOneWithoutUserNestedInput = {
    create?: XOR<AnketaCreateWithoutUserInput, AnketaUncheckedCreateWithoutUserInput>
    connectOrCreate?: AnketaCreateOrConnectWithoutUserInput
    upsert?: AnketaUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: AnketaWhereUniqueInput
    update?: XOR<AnketaUpdateWithoutUserInput, AnketaUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type BookingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutUserInput>, Enumerable<BookingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BookingCreateManyUserInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type ResponseUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutUserInput>, Enumerable<ResponseUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ResponseCreateManyUserInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutUserInput>, Enumerable<CommentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CommentCreateManyUserInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutAnketaInput = {
    create?: XOR<Enumerable<UserCreateWithoutAnketaInput>, Enumerable<UserUncheckedCreateWithoutAnketaInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAnketaInput>
    createMany?: UserCreateManyAnketaInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutAnketaInput = {
    create?: XOR<Enumerable<UserCreateWithoutAnketaInput>, Enumerable<UserUncheckedCreateWithoutAnketaInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAnketaInput>
    createMany?: UserCreateManyAnketaInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutAnketaNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutAnketaInput>, Enumerable<UserUncheckedCreateWithoutAnketaInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAnketaInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutAnketaInput>
    createMany?: UserCreateManyAnketaInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutAnketaInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutAnketaInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutAnketaNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutAnketaInput>, Enumerable<UserUncheckedCreateWithoutAnketaInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAnketaInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutAnketaInput>
    createMany?: UserCreateManyAnketaInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutAnketaInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutAnketaInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type BookCreateNestedOneWithoutImageModelInput = {
    create?: XOR<BookCreateWithoutImageModelInput, BookUncheckedCreateWithoutImageModelInput>
    connectOrCreate?: BookCreateOrConnectWithoutImageModelInput
    connect?: BookWhereUniqueInput
  }

  export type NewsCreateNestedOneWithoutImageModelInput = {
    create?: XOR<NewsCreateWithoutImageModelInput, NewsUncheckedCreateWithoutImageModelInput>
    connectOrCreate?: NewsCreateOrConnectWithoutImageModelInput
    connect?: NewsWhereUniqueInput
  }

  export type BookUpdateOneWithoutImageModelNestedInput = {
    create?: XOR<BookCreateWithoutImageModelInput, BookUncheckedCreateWithoutImageModelInput>
    connectOrCreate?: BookCreateOrConnectWithoutImageModelInput
    upsert?: BookUpsertWithoutImageModelInput
    disconnect?: boolean
    delete?: boolean
    connect?: BookWhereUniqueInput
    update?: XOR<BookUpdateWithoutImageModelInput, BookUncheckedUpdateWithoutImageModelInput>
  }

  export type NewsUpdateOneWithoutImageModelNestedInput = {
    create?: XOR<NewsCreateWithoutImageModelInput, NewsUncheckedCreateWithoutImageModelInput>
    connectOrCreate?: NewsCreateOrConnectWithoutImageModelInput
    upsert?: NewsUpsertWithoutImageModelInput
    disconnect?: boolean
    delete?: boolean
    connect?: NewsWhereUniqueInput
    update?: XOR<NewsUpdateWithoutImageModelInput, NewsUncheckedUpdateWithoutImageModelInput>
  }

  export type ImageModelCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<ImageModelCreateWithoutBookInput>, Enumerable<ImageModelUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<ImageModelCreateOrConnectWithoutBookInput>
    createMany?: ImageModelCreateManyBookInputEnvelope
    connect?: Enumerable<ImageModelWhereUniqueInput>
  }

  export type BookGenreCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<BookGenreCreateWithoutBookInput>, Enumerable<BookGenreUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookGenreCreateOrConnectWithoutBookInput>
    createMany?: BookGenreCreateManyBookInputEnvelope
    connect?: Enumerable<BookGenreWhereUniqueInput>
  }

  export type BookingCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<BookingCreateWithoutBookInput>, Enumerable<BookingUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutBookInput>
    createMany?: BookingCreateManyBookInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type ResponseCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutBookInput>, Enumerable<ResponseUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutBookInput>
    createMany?: ResponseCreateManyBookInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type ImageModelUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<ImageModelCreateWithoutBookInput>, Enumerable<ImageModelUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<ImageModelCreateOrConnectWithoutBookInput>
    createMany?: ImageModelCreateManyBookInputEnvelope
    connect?: Enumerable<ImageModelWhereUniqueInput>
  }

  export type BookGenreUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<BookGenreCreateWithoutBookInput>, Enumerable<BookGenreUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookGenreCreateOrConnectWithoutBookInput>
    createMany?: BookGenreCreateManyBookInputEnvelope
    connect?: Enumerable<BookGenreWhereUniqueInput>
  }

  export type BookingUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<BookingCreateWithoutBookInput>, Enumerable<BookingUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutBookInput>
    createMany?: BookingCreateManyBookInputEnvelope
    connect?: Enumerable<BookingWhereUniqueInput>
  }

  export type ResponseUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutBookInput>, Enumerable<ResponseUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutBookInput>
    createMany?: ResponseCreateManyBookInputEnvelope
    connect?: Enumerable<ResponseWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ImageModelUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<ImageModelCreateWithoutBookInput>, Enumerable<ImageModelUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<ImageModelCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<ImageModelUpsertWithWhereUniqueWithoutBookInput>
    createMany?: ImageModelCreateManyBookInputEnvelope
    set?: Enumerable<ImageModelWhereUniqueInput>
    disconnect?: Enumerable<ImageModelWhereUniqueInput>
    delete?: Enumerable<ImageModelWhereUniqueInput>
    connect?: Enumerable<ImageModelWhereUniqueInput>
    update?: Enumerable<ImageModelUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<ImageModelUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<ImageModelScalarWhereInput>
  }

  export type BookGenreUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<BookGenreCreateWithoutBookInput>, Enumerable<BookGenreUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookGenreCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<BookGenreUpsertWithWhereUniqueWithoutBookInput>
    createMany?: BookGenreCreateManyBookInputEnvelope
    set?: Enumerable<BookGenreWhereUniqueInput>
    disconnect?: Enumerable<BookGenreWhereUniqueInput>
    delete?: Enumerable<BookGenreWhereUniqueInput>
    connect?: Enumerable<BookGenreWhereUniqueInput>
    update?: Enumerable<BookGenreUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<BookGenreUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<BookGenreScalarWhereInput>
  }

  export type BookingUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutBookInput>, Enumerable<BookingUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutBookInput>
    createMany?: BookingCreateManyBookInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type ResponseUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutBookInput>, Enumerable<ResponseUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutBookInput>
    createMany?: ResponseCreateManyBookInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type ImageModelUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<ImageModelCreateWithoutBookInput>, Enumerable<ImageModelUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<ImageModelCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<ImageModelUpsertWithWhereUniqueWithoutBookInput>
    createMany?: ImageModelCreateManyBookInputEnvelope
    set?: Enumerable<ImageModelWhereUniqueInput>
    disconnect?: Enumerable<ImageModelWhereUniqueInput>
    delete?: Enumerable<ImageModelWhereUniqueInput>
    connect?: Enumerable<ImageModelWhereUniqueInput>
    update?: Enumerable<ImageModelUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<ImageModelUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<ImageModelScalarWhereInput>
  }

  export type BookGenreUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<BookGenreCreateWithoutBookInput>, Enumerable<BookGenreUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookGenreCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<BookGenreUpsertWithWhereUniqueWithoutBookInput>
    createMany?: BookGenreCreateManyBookInputEnvelope
    set?: Enumerable<BookGenreWhereUniqueInput>
    disconnect?: Enumerable<BookGenreWhereUniqueInput>
    delete?: Enumerable<BookGenreWhereUniqueInput>
    connect?: Enumerable<BookGenreWhereUniqueInput>
    update?: Enumerable<BookGenreUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<BookGenreUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<BookGenreScalarWhereInput>
  }

  export type BookingUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<BookingCreateWithoutBookInput>, Enumerable<BookingUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookingCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<BookingUpsertWithWhereUniqueWithoutBookInput>
    createMany?: BookingCreateManyBookInputEnvelope
    set?: Enumerable<BookingWhereUniqueInput>
    disconnect?: Enumerable<BookingWhereUniqueInput>
    delete?: Enumerable<BookingWhereUniqueInput>
    connect?: Enumerable<BookingWhereUniqueInput>
    update?: Enumerable<BookingUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<BookingUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<BookingScalarWhereInput>
  }

  export type ResponseUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<ResponseCreateWithoutBookInput>, Enumerable<ResponseUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<ResponseCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<ResponseUpsertWithWhereUniqueWithoutBookInput>
    createMany?: ResponseCreateManyBookInputEnvelope
    set?: Enumerable<ResponseWhereUniqueInput>
    disconnect?: Enumerable<ResponseWhereUniqueInput>
    delete?: Enumerable<ResponseWhereUniqueInput>
    connect?: Enumerable<ResponseWhereUniqueInput>
    update?: Enumerable<ResponseUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<ResponseUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<ResponseScalarWhereInput>
  }

  export type BookCreateNestedOneWithoutBookGenreInput = {
    create?: XOR<BookCreateWithoutBookGenreInput, BookUncheckedCreateWithoutBookGenreInput>
    connectOrCreate?: BookCreateOrConnectWithoutBookGenreInput
    connect?: BookWhereUniqueInput
  }

  export type GenreCreateNestedOneWithoutBookGenreInput = {
    create?: XOR<GenreCreateWithoutBookGenreInput, GenreUncheckedCreateWithoutBookGenreInput>
    connectOrCreate?: GenreCreateOrConnectWithoutBookGenreInput
    connect?: GenreWhereUniqueInput
  }

  export type BookUpdateOneRequiredWithoutBookGenreNestedInput = {
    create?: XOR<BookCreateWithoutBookGenreInput, BookUncheckedCreateWithoutBookGenreInput>
    connectOrCreate?: BookCreateOrConnectWithoutBookGenreInput
    upsert?: BookUpsertWithoutBookGenreInput
    connect?: BookWhereUniqueInput
    update?: XOR<BookUpdateWithoutBookGenreInput, BookUncheckedUpdateWithoutBookGenreInput>
  }

  export type GenreUpdateOneRequiredWithoutBookGenreNestedInput = {
    create?: XOR<GenreCreateWithoutBookGenreInput, GenreUncheckedCreateWithoutBookGenreInput>
    connectOrCreate?: GenreCreateOrConnectWithoutBookGenreInput
    upsert?: GenreUpsertWithoutBookGenreInput
    connect?: GenreWhereUniqueInput
    update?: XOR<GenreUpdateWithoutBookGenreInput, GenreUncheckedUpdateWithoutBookGenreInput>
  }

  export type BookGenreCreateNestedManyWithoutGenreInput = {
    create?: XOR<Enumerable<BookGenreCreateWithoutGenreInput>, Enumerable<BookGenreUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<BookGenreCreateOrConnectWithoutGenreInput>
    createMany?: BookGenreCreateManyGenreInputEnvelope
    connect?: Enumerable<BookGenreWhereUniqueInput>
  }

  export type BookGenreUncheckedCreateNestedManyWithoutGenreInput = {
    create?: XOR<Enumerable<BookGenreCreateWithoutGenreInput>, Enumerable<BookGenreUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<BookGenreCreateOrConnectWithoutGenreInput>
    createMany?: BookGenreCreateManyGenreInputEnvelope
    connect?: Enumerable<BookGenreWhereUniqueInput>
  }

  export type BookGenreUpdateManyWithoutGenreNestedInput = {
    create?: XOR<Enumerable<BookGenreCreateWithoutGenreInput>, Enumerable<BookGenreUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<BookGenreCreateOrConnectWithoutGenreInput>
    upsert?: Enumerable<BookGenreUpsertWithWhereUniqueWithoutGenreInput>
    createMany?: BookGenreCreateManyGenreInputEnvelope
    set?: Enumerable<BookGenreWhereUniqueInput>
    disconnect?: Enumerable<BookGenreWhereUniqueInput>
    delete?: Enumerable<BookGenreWhereUniqueInput>
    connect?: Enumerable<BookGenreWhereUniqueInput>
    update?: Enumerable<BookGenreUpdateWithWhereUniqueWithoutGenreInput>
    updateMany?: Enumerable<BookGenreUpdateManyWithWhereWithoutGenreInput>
    deleteMany?: Enumerable<BookGenreScalarWhereInput>
  }

  export type BookGenreUncheckedUpdateManyWithoutGenreNestedInput = {
    create?: XOR<Enumerable<BookGenreCreateWithoutGenreInput>, Enumerable<BookGenreUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<BookGenreCreateOrConnectWithoutGenreInput>
    upsert?: Enumerable<BookGenreUpsertWithWhereUniqueWithoutGenreInput>
    createMany?: BookGenreCreateManyGenreInputEnvelope
    set?: Enumerable<BookGenreWhereUniqueInput>
    disconnect?: Enumerable<BookGenreWhereUniqueInput>
    delete?: Enumerable<BookGenreWhereUniqueInput>
    connect?: Enumerable<BookGenreWhereUniqueInput>
    update?: Enumerable<BookGenreUpdateWithWhereUniqueWithoutGenreInput>
    updateMany?: Enumerable<BookGenreUpdateManyWithWhereWithoutGenreInput>
    deleteMany?: Enumerable<BookGenreScalarWhereInput>
  }

  export type ImageModelCreateNestedManyWithoutNewsInput = {
    create?: XOR<Enumerable<ImageModelCreateWithoutNewsInput>, Enumerable<ImageModelUncheckedCreateWithoutNewsInput>>
    connectOrCreate?: Enumerable<ImageModelCreateOrConnectWithoutNewsInput>
    createMany?: ImageModelCreateManyNewsInputEnvelope
    connect?: Enumerable<ImageModelWhereUniqueInput>
  }

  export type CommentCreateNestedManyWithoutNewsInput = {
    create?: XOR<Enumerable<CommentCreateWithoutNewsInput>, Enumerable<CommentUncheckedCreateWithoutNewsInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutNewsInput>
    createMany?: CommentCreateManyNewsInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type ImageModelUncheckedCreateNestedManyWithoutNewsInput = {
    create?: XOR<Enumerable<ImageModelCreateWithoutNewsInput>, Enumerable<ImageModelUncheckedCreateWithoutNewsInput>>
    connectOrCreate?: Enumerable<ImageModelCreateOrConnectWithoutNewsInput>
    createMany?: ImageModelCreateManyNewsInputEnvelope
    connect?: Enumerable<ImageModelWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutNewsInput = {
    create?: XOR<Enumerable<CommentCreateWithoutNewsInput>, Enumerable<CommentUncheckedCreateWithoutNewsInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutNewsInput>
    createMany?: CommentCreateManyNewsInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type ImageModelUpdateManyWithoutNewsNestedInput = {
    create?: XOR<Enumerable<ImageModelCreateWithoutNewsInput>, Enumerable<ImageModelUncheckedCreateWithoutNewsInput>>
    connectOrCreate?: Enumerable<ImageModelCreateOrConnectWithoutNewsInput>
    upsert?: Enumerable<ImageModelUpsertWithWhereUniqueWithoutNewsInput>
    createMany?: ImageModelCreateManyNewsInputEnvelope
    set?: Enumerable<ImageModelWhereUniqueInput>
    disconnect?: Enumerable<ImageModelWhereUniqueInput>
    delete?: Enumerable<ImageModelWhereUniqueInput>
    connect?: Enumerable<ImageModelWhereUniqueInput>
    update?: Enumerable<ImageModelUpdateWithWhereUniqueWithoutNewsInput>
    updateMany?: Enumerable<ImageModelUpdateManyWithWhereWithoutNewsInput>
    deleteMany?: Enumerable<ImageModelScalarWhereInput>
  }

  export type CommentUpdateManyWithoutNewsNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutNewsInput>, Enumerable<CommentUncheckedCreateWithoutNewsInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutNewsInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutNewsInput>
    createMany?: CommentCreateManyNewsInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutNewsInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutNewsInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type ImageModelUncheckedUpdateManyWithoutNewsNestedInput = {
    create?: XOR<Enumerable<ImageModelCreateWithoutNewsInput>, Enumerable<ImageModelUncheckedCreateWithoutNewsInput>>
    connectOrCreate?: Enumerable<ImageModelCreateOrConnectWithoutNewsInput>
    upsert?: Enumerable<ImageModelUpsertWithWhereUniqueWithoutNewsInput>
    createMany?: ImageModelCreateManyNewsInputEnvelope
    set?: Enumerable<ImageModelWhereUniqueInput>
    disconnect?: Enumerable<ImageModelWhereUniqueInput>
    delete?: Enumerable<ImageModelWhereUniqueInput>
    connect?: Enumerable<ImageModelWhereUniqueInput>
    update?: Enumerable<ImageModelUpdateWithWhereUniqueWithoutNewsInput>
    updateMany?: Enumerable<ImageModelUpdateManyWithWhereWithoutNewsInput>
    deleteMany?: Enumerable<ImageModelScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutNewsNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutNewsInput>, Enumerable<CommentUncheckedCreateWithoutNewsInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutNewsInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutNewsInput>
    createMany?: CommentCreateManyNewsInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutNewsInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutNewsInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutCommentInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    connect?: UserWhereUniqueInput
  }

  export type NewsCreateNestedOneWithoutCommentInput = {
    create?: XOR<NewsCreateWithoutCommentInput, NewsUncheckedCreateWithoutCommentInput>
    connectOrCreate?: NewsCreateOrConnectWithoutCommentInput
    connect?: NewsWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    upsert?: UserUpsertWithoutCommentInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
  }

  export type NewsUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<NewsCreateWithoutCommentInput, NewsUncheckedCreateWithoutCommentInput>
    connectOrCreate?: NewsCreateOrConnectWithoutCommentInput
    upsert?: NewsUpsertWithoutCommentInput
    connect?: NewsWhereUniqueInput
    update?: XOR<NewsUpdateWithoutCommentInput, NewsUncheckedUpdateWithoutCommentInput>
  }

  export type BookCreateNestedOneWithoutResponseInput = {
    create?: XOR<BookCreateWithoutResponseInput, BookUncheckedCreateWithoutResponseInput>
    connectOrCreate?: BookCreateOrConnectWithoutResponseInput
    connect?: BookWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutResponseInput = {
    create?: XOR<UserCreateWithoutResponseInput, UserUncheckedCreateWithoutResponseInput>
    connectOrCreate?: UserCreateOrConnectWithoutResponseInput
    connect?: UserWhereUniqueInput
  }

  export type BookUpdateOneRequiredWithoutResponseNestedInput = {
    create?: XOR<BookCreateWithoutResponseInput, BookUncheckedCreateWithoutResponseInput>
    connectOrCreate?: BookCreateOrConnectWithoutResponseInput
    upsert?: BookUpsertWithoutResponseInput
    connect?: BookWhereUniqueInput
    update?: XOR<BookUpdateWithoutResponseInput, BookUncheckedUpdateWithoutResponseInput>
  }

  export type UserUpdateOneRequiredWithoutResponseNestedInput = {
    create?: XOR<UserCreateWithoutResponseInput, UserUncheckedCreateWithoutResponseInput>
    connectOrCreate?: UserCreateOrConnectWithoutResponseInput
    upsert?: UserUpsertWithoutResponseInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutResponseInput, UserUncheckedUpdateWithoutResponseInput>
  }

  export type BookCreateNestedOneWithoutBookingInput = {
    create?: XOR<BookCreateWithoutBookingInput, BookUncheckedCreateWithoutBookingInput>
    connectOrCreate?: BookCreateOrConnectWithoutBookingInput
    connect?: BookWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBookingInput = {
    create?: XOR<UserCreateWithoutBookingInput, UserUncheckedCreateWithoutBookingInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type BookUpdateOneRequiredWithoutBookingNestedInput = {
    create?: XOR<BookCreateWithoutBookingInput, BookUncheckedCreateWithoutBookingInput>
    connectOrCreate?: BookCreateOrConnectWithoutBookingInput
    upsert?: BookUpsertWithoutBookingInput
    connect?: BookWhereUniqueInput
    update?: XOR<BookUpdateWithoutBookingInput, BookUncheckedUpdateWithoutBookingInput>
  }

  export type UserUpdateOneRequiredWithoutBookingNestedInput = {
    create?: XOR<UserCreateWithoutBookingInput, UserUncheckedCreateWithoutBookingInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingInput
    upsert?: UserUpsertWithoutBookingInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBookingInput, UserUncheckedUpdateWithoutBookingInput>
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedBigIntNullableFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableFilter | bigint | number | null
  }

  export type NestedBigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedBigIntNullableWithAggregatesFilter = {
    equals?: bigint | number | null
    in?: Enumerable<bigint> | Enumerable<number> | null
    notIn?: Enumerable<bigint> | Enumerable<number> | null
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntNullableWithAggregatesFilter | bigint | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedBigIntNullableFilter
    _min?: NestedBigIntNullableFilter
    _max?: NestedBigIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type BookingCreateWithoutUserInput = {
    id?: bigint | number
    received_date: Date | string
    expiration_date: Date | string
    return_date: Date | string
    isExtend?: boolean
    isExtendApproved?: boolean
    Book: BookCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    received_date: Date | string
    expiration_date: Date | string
    return_date: Date | string
    bookId: bigint | number
    isExtend?: boolean
    isExtendApproved?: boolean
  }

  export type BookingCreateOrConnectWithoutUserInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingCreateManyUserInputEnvelope = {
    data: Enumerable<BookingCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ResponseCreateWithoutUserInput = {
    id?: bigint | number
    Book: BookCreateNestedOneWithoutResponseInput
  }

  export type ResponseUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    bookId: bigint | number
  }

  export type ResponseCreateOrConnectWithoutUserInput = {
    where: ResponseWhereUniqueInput
    create: XOR<ResponseCreateWithoutUserInput, ResponseUncheckedCreateWithoutUserInput>
  }

  export type ResponseCreateManyUserInputEnvelope = {
    data: Enumerable<ResponseCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AnketaCreateWithoutUserInput = {
    id?: bigint | number
    birthDay: Date | string
    address: string
    education: string
    specialty: string
    workStudy: string
  }

  export type AnketaUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    birthDay: Date | string
    address: string
    education: string
    specialty: string
    workStudy: string
  }

  export type AnketaCreateOrConnectWithoutUserInput = {
    where: AnketaWhereUniqueInput
    create: XOR<AnketaCreateWithoutUserInput, AnketaUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateWithoutUserInput = {
    id?: bigint | number
    message: string
    News: NewsCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    message: string
    newsId: bigint | number
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: Enumerable<CommentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type BookingUpsertWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
  }

  export type BookingUpdateManyWithWhereWithoutUserInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutBookingInput>
  }

  export type BookingScalarWhereInput = {
    AND?: Enumerable<BookingScalarWhereInput>
    OR?: Enumerable<BookingScalarWhereInput>
    NOT?: Enumerable<BookingScalarWhereInput>
    id?: BigIntFilter | bigint | number
    received_date?: DateTimeFilter | Date | string
    expiration_date?: DateTimeFilter | Date | string
    return_date?: DateTimeFilter | Date | string
    userId?: BigIntFilter | bigint | number
    bookId?: BigIntFilter | bigint | number
    isExtend?: BoolFilter | boolean
    isExtendApproved?: BoolFilter | boolean
  }

  export type ResponseUpsertWithWhereUniqueWithoutUserInput = {
    where: ResponseWhereUniqueInput
    update: XOR<ResponseUpdateWithoutUserInput, ResponseUncheckedUpdateWithoutUserInput>
    create: XOR<ResponseCreateWithoutUserInput, ResponseUncheckedCreateWithoutUserInput>
  }

  export type ResponseUpdateWithWhereUniqueWithoutUserInput = {
    where: ResponseWhereUniqueInput
    data: XOR<ResponseUpdateWithoutUserInput, ResponseUncheckedUpdateWithoutUserInput>
  }

  export type ResponseUpdateManyWithWhereWithoutUserInput = {
    where: ResponseScalarWhereInput
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyWithoutResponseInput>
  }

  export type ResponseScalarWhereInput = {
    AND?: Enumerable<ResponseScalarWhereInput>
    OR?: Enumerable<ResponseScalarWhereInput>
    NOT?: Enumerable<ResponseScalarWhereInput>
    id?: BigIntFilter | bigint | number
    bookId?: BigIntFilter | bigint | number
    userId?: BigIntFilter | bigint | number
  }

  export type AnketaUpsertWithoutUserInput = {
    update: XOR<AnketaUpdateWithoutUserInput, AnketaUncheckedUpdateWithoutUserInput>
    create: XOR<AnketaCreateWithoutUserInput, AnketaUncheckedCreateWithoutUserInput>
  }

  export type AnketaUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    birthDay?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    workStudy?: StringFieldUpdateOperationsInput | string
  }

  export type AnketaUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    birthDay?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: StringFieldUpdateOperationsInput | string
    education?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    workStudy?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentInput>
  }

  export type CommentScalarWhereInput = {
    AND?: Enumerable<CommentScalarWhereInput>
    OR?: Enumerable<CommentScalarWhereInput>
    NOT?: Enumerable<CommentScalarWhereInput>
    id?: BigIntFilter | bigint | number
    message?: StringFilter | string
    userId?: BigIntFilter | bigint | number
    newsId?: BigIntFilter | bigint | number
  }

  export type UserCreateWithoutAnketaInput = {
    id?: bigint | number
    firstName: string
    lastName: string
    fatherName?: string | null
    phoneNumber: string
    password: string
    role?: Role
    avatar?: string | null
    IIN: string
    Booking?: BookingCreateNestedManyWithoutUserInput
    Response?: ResponseCreateNestedManyWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAnketaInput = {
    id?: bigint | number
    firstName: string
    lastName: string
    fatherName?: string | null
    phoneNumber: string
    password: string
    role?: Role
    avatar?: string | null
    IIN: string
    Booking?: BookingUncheckedCreateNestedManyWithoutUserInput
    Response?: ResponseUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAnketaInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnketaInput, UserUncheckedCreateWithoutAnketaInput>
  }

  export type UserCreateManyAnketaInputEnvelope = {
    data: Enumerable<UserCreateManyAnketaInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutAnketaInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAnketaInput, UserUncheckedUpdateWithoutAnketaInput>
    create: XOR<UserCreateWithoutAnketaInput, UserUncheckedCreateWithoutAnketaInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAnketaInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAnketaInput, UserUncheckedUpdateWithoutAnketaInput>
  }

  export type UserUpdateManyWithWhereWithoutAnketaInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: BigIntFilter | bigint | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    fatherName?: StringNullableFilter | string | null
    phoneNumber?: StringFilter | string
    password?: StringFilter | string
    role?: EnumRoleFilter | Role
    avatar?: StringNullableFilter | string | null
    IIN?: StringFilter | string
    anketaId?: BigIntNullableFilter | bigint | number | null
  }

  export type BookCreateWithoutImageModelInput = {
    id?: bigint | number
    title: string
    author: string
    isbn: string
    description: string
    count: number
    rating: number
    price: number
    publishing_date: Date | string
    topic: string
    BookGenre?: BookGenreCreateNestedManyWithoutBookInput
    Booking?: BookingCreateNestedManyWithoutBookInput
    Response?: ResponseCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutImageModelInput = {
    id?: bigint | number
    title: string
    author: string
    isbn: string
    description: string
    count: number
    rating: number
    price: number
    publishing_date: Date | string
    topic: string
    BookGenre?: BookGenreUncheckedCreateNestedManyWithoutBookInput
    Booking?: BookingUncheckedCreateNestedManyWithoutBookInput
    Response?: ResponseUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutImageModelInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutImageModelInput, BookUncheckedCreateWithoutImageModelInput>
  }

  export type NewsCreateWithoutImageModelInput = {
    id?: bigint | number
    title: string
    short_title: string
    description: string
    created_at: Date | string
    update_at: Date | string
    Comment?: CommentCreateNestedManyWithoutNewsInput
  }

  export type NewsUncheckedCreateWithoutImageModelInput = {
    id?: bigint | number
    title: string
    short_title: string
    description: string
    created_at: Date | string
    update_at: Date | string
    Comment?: CommentUncheckedCreateNestedManyWithoutNewsInput
  }

  export type NewsCreateOrConnectWithoutImageModelInput = {
    where: NewsWhereUniqueInput
    create: XOR<NewsCreateWithoutImageModelInput, NewsUncheckedCreateWithoutImageModelInput>
  }

  export type BookUpsertWithoutImageModelInput = {
    update: XOR<BookUpdateWithoutImageModelInput, BookUncheckedUpdateWithoutImageModelInput>
    create: XOR<BookCreateWithoutImageModelInput, BookUncheckedCreateWithoutImageModelInput>
  }

  export type BookUpdateWithoutImageModelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    publishing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    BookGenre?: BookGenreUpdateManyWithoutBookNestedInput
    Booking?: BookingUpdateManyWithoutBookNestedInput
    Response?: ResponseUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutImageModelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    publishing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    BookGenre?: BookGenreUncheckedUpdateManyWithoutBookNestedInput
    Booking?: BookingUncheckedUpdateManyWithoutBookNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutBookNestedInput
  }

  export type NewsUpsertWithoutImageModelInput = {
    update: XOR<NewsUpdateWithoutImageModelInput, NewsUncheckedUpdateWithoutImageModelInput>
    create: XOR<NewsCreateWithoutImageModelInput, NewsUncheckedCreateWithoutImageModelInput>
  }

  export type NewsUpdateWithoutImageModelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    short_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUpdateManyWithoutNewsNestedInput
  }

  export type NewsUncheckedUpdateWithoutImageModelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    short_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUncheckedUpdateManyWithoutNewsNestedInput
  }

  export type ImageModelCreateWithoutBookInput = {
    id?: bigint | number
    link: string
    News?: NewsCreateNestedOneWithoutImageModelInput
  }

  export type ImageModelUncheckedCreateWithoutBookInput = {
    id?: bigint | number
    link: string
    newsId?: bigint | number | null
  }

  export type ImageModelCreateOrConnectWithoutBookInput = {
    where: ImageModelWhereUniqueInput
    create: XOR<ImageModelCreateWithoutBookInput, ImageModelUncheckedCreateWithoutBookInput>
  }

  export type ImageModelCreateManyBookInputEnvelope = {
    data: Enumerable<ImageModelCreateManyBookInput>
    skipDuplicates?: boolean
  }

  export type BookGenreCreateWithoutBookInput = {
    id?: bigint | number
    Genre: GenreCreateNestedOneWithoutBookGenreInput
  }

  export type BookGenreUncheckedCreateWithoutBookInput = {
    id?: bigint | number
    genreId: bigint | number
  }

  export type BookGenreCreateOrConnectWithoutBookInput = {
    where: BookGenreWhereUniqueInput
    create: XOR<BookGenreCreateWithoutBookInput, BookGenreUncheckedCreateWithoutBookInput>
  }

  export type BookGenreCreateManyBookInputEnvelope = {
    data: Enumerable<BookGenreCreateManyBookInput>
    skipDuplicates?: boolean
  }

  export type BookingCreateWithoutBookInput = {
    id?: bigint | number
    received_date: Date | string
    expiration_date: Date | string
    return_date: Date | string
    isExtend?: boolean
    isExtendApproved?: boolean
    User: UserCreateNestedOneWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutBookInput = {
    id?: bigint | number
    received_date: Date | string
    expiration_date: Date | string
    return_date: Date | string
    userId: bigint | number
    isExtend?: boolean
    isExtendApproved?: boolean
  }

  export type BookingCreateOrConnectWithoutBookInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutBookInput, BookingUncheckedCreateWithoutBookInput>
  }

  export type BookingCreateManyBookInputEnvelope = {
    data: Enumerable<BookingCreateManyBookInput>
    skipDuplicates?: boolean
  }

  export type ResponseCreateWithoutBookInput = {
    id?: bigint | number
    User: UserCreateNestedOneWithoutResponseInput
  }

  export type ResponseUncheckedCreateWithoutBookInput = {
    id?: bigint | number
    userId: bigint | number
  }

  export type ResponseCreateOrConnectWithoutBookInput = {
    where: ResponseWhereUniqueInput
    create: XOR<ResponseCreateWithoutBookInput, ResponseUncheckedCreateWithoutBookInput>
  }

  export type ResponseCreateManyBookInputEnvelope = {
    data: Enumerable<ResponseCreateManyBookInput>
    skipDuplicates?: boolean
  }

  export type ImageModelUpsertWithWhereUniqueWithoutBookInput = {
    where: ImageModelWhereUniqueInput
    update: XOR<ImageModelUpdateWithoutBookInput, ImageModelUncheckedUpdateWithoutBookInput>
    create: XOR<ImageModelCreateWithoutBookInput, ImageModelUncheckedCreateWithoutBookInput>
  }

  export type ImageModelUpdateWithWhereUniqueWithoutBookInput = {
    where: ImageModelWhereUniqueInput
    data: XOR<ImageModelUpdateWithoutBookInput, ImageModelUncheckedUpdateWithoutBookInput>
  }

  export type ImageModelUpdateManyWithWhereWithoutBookInput = {
    where: ImageModelScalarWhereInput
    data: XOR<ImageModelUpdateManyMutationInput, ImageModelUncheckedUpdateManyWithoutImageModelInput>
  }

  export type ImageModelScalarWhereInput = {
    AND?: Enumerable<ImageModelScalarWhereInput>
    OR?: Enumerable<ImageModelScalarWhereInput>
    NOT?: Enumerable<ImageModelScalarWhereInput>
    id?: BigIntFilter | bigint | number
    link?: StringFilter | string
    bookId?: BigIntNullableFilter | bigint | number | null
    newsId?: BigIntNullableFilter | bigint | number | null
  }

  export type BookGenreUpsertWithWhereUniqueWithoutBookInput = {
    where: BookGenreWhereUniqueInput
    update: XOR<BookGenreUpdateWithoutBookInput, BookGenreUncheckedUpdateWithoutBookInput>
    create: XOR<BookGenreCreateWithoutBookInput, BookGenreUncheckedCreateWithoutBookInput>
  }

  export type BookGenreUpdateWithWhereUniqueWithoutBookInput = {
    where: BookGenreWhereUniqueInput
    data: XOR<BookGenreUpdateWithoutBookInput, BookGenreUncheckedUpdateWithoutBookInput>
  }

  export type BookGenreUpdateManyWithWhereWithoutBookInput = {
    where: BookGenreScalarWhereInput
    data: XOR<BookGenreUpdateManyMutationInput, BookGenreUncheckedUpdateManyWithoutBookGenreInput>
  }

  export type BookGenreScalarWhereInput = {
    AND?: Enumerable<BookGenreScalarWhereInput>
    OR?: Enumerable<BookGenreScalarWhereInput>
    NOT?: Enumerable<BookGenreScalarWhereInput>
    id?: BigIntFilter | bigint | number
    bookId?: BigIntFilter | bigint | number
    genreId?: BigIntFilter | bigint | number
  }

  export type BookingUpsertWithWhereUniqueWithoutBookInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutBookInput, BookingUncheckedUpdateWithoutBookInput>
    create: XOR<BookingCreateWithoutBookInput, BookingUncheckedCreateWithoutBookInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutBookInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutBookInput, BookingUncheckedUpdateWithoutBookInput>
  }

  export type BookingUpdateManyWithWhereWithoutBookInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutBookingInput>
  }

  export type ResponseUpsertWithWhereUniqueWithoutBookInput = {
    where: ResponseWhereUniqueInput
    update: XOR<ResponseUpdateWithoutBookInput, ResponseUncheckedUpdateWithoutBookInput>
    create: XOR<ResponseCreateWithoutBookInput, ResponseUncheckedCreateWithoutBookInput>
  }

  export type ResponseUpdateWithWhereUniqueWithoutBookInput = {
    where: ResponseWhereUniqueInput
    data: XOR<ResponseUpdateWithoutBookInput, ResponseUncheckedUpdateWithoutBookInput>
  }

  export type ResponseUpdateManyWithWhereWithoutBookInput = {
    where: ResponseScalarWhereInput
    data: XOR<ResponseUpdateManyMutationInput, ResponseUncheckedUpdateManyWithoutResponseInput>
  }

  export type BookCreateWithoutBookGenreInput = {
    id?: bigint | number
    title: string
    author: string
    isbn: string
    description: string
    count: number
    rating: number
    price: number
    publishing_date: Date | string
    topic: string
    ImageModel?: ImageModelCreateNestedManyWithoutBookInput
    Booking?: BookingCreateNestedManyWithoutBookInput
    Response?: ResponseCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutBookGenreInput = {
    id?: bigint | number
    title: string
    author: string
    isbn: string
    description: string
    count: number
    rating: number
    price: number
    publishing_date: Date | string
    topic: string
    ImageModel?: ImageModelUncheckedCreateNestedManyWithoutBookInput
    Booking?: BookingUncheckedCreateNestedManyWithoutBookInput
    Response?: ResponseUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutBookGenreInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutBookGenreInput, BookUncheckedCreateWithoutBookGenreInput>
  }

  export type GenreCreateWithoutBookGenreInput = {
    id?: bigint | number
    name: string
  }

  export type GenreUncheckedCreateWithoutBookGenreInput = {
    id?: bigint | number
    name: string
  }

  export type GenreCreateOrConnectWithoutBookGenreInput = {
    where: GenreWhereUniqueInput
    create: XOR<GenreCreateWithoutBookGenreInput, GenreUncheckedCreateWithoutBookGenreInput>
  }

  export type BookUpsertWithoutBookGenreInput = {
    update: XOR<BookUpdateWithoutBookGenreInput, BookUncheckedUpdateWithoutBookGenreInput>
    create: XOR<BookCreateWithoutBookGenreInput, BookUncheckedCreateWithoutBookGenreInput>
  }

  export type BookUpdateWithoutBookGenreInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    publishing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    ImageModel?: ImageModelUpdateManyWithoutBookNestedInput
    Booking?: BookingUpdateManyWithoutBookNestedInput
    Response?: ResponseUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutBookGenreInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    publishing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    ImageModel?: ImageModelUncheckedUpdateManyWithoutBookNestedInput
    Booking?: BookingUncheckedUpdateManyWithoutBookNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutBookNestedInput
  }

  export type GenreUpsertWithoutBookGenreInput = {
    update: XOR<GenreUpdateWithoutBookGenreInput, GenreUncheckedUpdateWithoutBookGenreInput>
    create: XOR<GenreCreateWithoutBookGenreInput, GenreUncheckedCreateWithoutBookGenreInput>
  }

  export type GenreUpdateWithoutBookGenreInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenreUncheckedUpdateWithoutBookGenreInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BookGenreCreateWithoutGenreInput = {
    id?: bigint | number
    Book: BookCreateNestedOneWithoutBookGenreInput
  }

  export type BookGenreUncheckedCreateWithoutGenreInput = {
    id?: bigint | number
    bookId: bigint | number
  }

  export type BookGenreCreateOrConnectWithoutGenreInput = {
    where: BookGenreWhereUniqueInput
    create: XOR<BookGenreCreateWithoutGenreInput, BookGenreUncheckedCreateWithoutGenreInput>
  }

  export type BookGenreCreateManyGenreInputEnvelope = {
    data: Enumerable<BookGenreCreateManyGenreInput>
    skipDuplicates?: boolean
  }

  export type BookGenreUpsertWithWhereUniqueWithoutGenreInput = {
    where: BookGenreWhereUniqueInput
    update: XOR<BookGenreUpdateWithoutGenreInput, BookGenreUncheckedUpdateWithoutGenreInput>
    create: XOR<BookGenreCreateWithoutGenreInput, BookGenreUncheckedCreateWithoutGenreInput>
  }

  export type BookGenreUpdateWithWhereUniqueWithoutGenreInput = {
    where: BookGenreWhereUniqueInput
    data: XOR<BookGenreUpdateWithoutGenreInput, BookGenreUncheckedUpdateWithoutGenreInput>
  }

  export type BookGenreUpdateManyWithWhereWithoutGenreInput = {
    where: BookGenreScalarWhereInput
    data: XOR<BookGenreUpdateManyMutationInput, BookGenreUncheckedUpdateManyWithoutBookGenreInput>
  }

  export type ImageModelCreateWithoutNewsInput = {
    id?: bigint | number
    link: string
    Book?: BookCreateNestedOneWithoutImageModelInput
  }

  export type ImageModelUncheckedCreateWithoutNewsInput = {
    id?: bigint | number
    link: string
    bookId?: bigint | number | null
  }

  export type ImageModelCreateOrConnectWithoutNewsInput = {
    where: ImageModelWhereUniqueInput
    create: XOR<ImageModelCreateWithoutNewsInput, ImageModelUncheckedCreateWithoutNewsInput>
  }

  export type ImageModelCreateManyNewsInputEnvelope = {
    data: Enumerable<ImageModelCreateManyNewsInput>
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutNewsInput = {
    id?: bigint | number
    message: string
    User: UserCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutNewsInput = {
    id?: bigint | number
    message: string
    userId: bigint | number
  }

  export type CommentCreateOrConnectWithoutNewsInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutNewsInput, CommentUncheckedCreateWithoutNewsInput>
  }

  export type CommentCreateManyNewsInputEnvelope = {
    data: Enumerable<CommentCreateManyNewsInput>
    skipDuplicates?: boolean
  }

  export type ImageModelUpsertWithWhereUniqueWithoutNewsInput = {
    where: ImageModelWhereUniqueInput
    update: XOR<ImageModelUpdateWithoutNewsInput, ImageModelUncheckedUpdateWithoutNewsInput>
    create: XOR<ImageModelCreateWithoutNewsInput, ImageModelUncheckedCreateWithoutNewsInput>
  }

  export type ImageModelUpdateWithWhereUniqueWithoutNewsInput = {
    where: ImageModelWhereUniqueInput
    data: XOR<ImageModelUpdateWithoutNewsInput, ImageModelUncheckedUpdateWithoutNewsInput>
  }

  export type ImageModelUpdateManyWithWhereWithoutNewsInput = {
    where: ImageModelScalarWhereInput
    data: XOR<ImageModelUpdateManyMutationInput, ImageModelUncheckedUpdateManyWithoutImageModelInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutNewsInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutNewsInput, CommentUncheckedUpdateWithoutNewsInput>
    create: XOR<CommentCreateWithoutNewsInput, CommentUncheckedCreateWithoutNewsInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutNewsInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutNewsInput, CommentUncheckedUpdateWithoutNewsInput>
  }

  export type CommentUpdateManyWithWhereWithoutNewsInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentInput>
  }

  export type UserCreateWithoutCommentInput = {
    id?: bigint | number
    firstName: string
    lastName: string
    fatherName?: string | null
    phoneNumber: string
    password: string
    role?: Role
    avatar?: string | null
    IIN: string
    Booking?: BookingCreateNestedManyWithoutUserInput
    Response?: ResponseCreateNestedManyWithoutUserInput
    Anketa?: AnketaCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentInput = {
    id?: bigint | number
    firstName: string
    lastName: string
    fatherName?: string | null
    phoneNumber: string
    password: string
    role?: Role
    avatar?: string | null
    IIN: string
    anketaId?: bigint | number | null
    Booking?: BookingUncheckedCreateNestedManyWithoutUserInput
    Response?: ResponseUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
  }

  export type NewsCreateWithoutCommentInput = {
    id?: bigint | number
    title: string
    short_title: string
    description: string
    created_at: Date | string
    update_at: Date | string
    ImageModel?: ImageModelCreateNestedManyWithoutNewsInput
  }

  export type NewsUncheckedCreateWithoutCommentInput = {
    id?: bigint | number
    title: string
    short_title: string
    description: string
    created_at: Date | string
    update_at: Date | string
    ImageModel?: ImageModelUncheckedCreateNestedManyWithoutNewsInput
  }

  export type NewsCreateOrConnectWithoutCommentInput = {
    where: NewsWhereUniqueInput
    create: XOR<NewsCreateWithoutCommentInput, NewsUncheckedCreateWithoutCommentInput>
  }

  export type UserUpsertWithoutCommentInput = {
    update: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
  }

  export type UserUpdateWithoutCommentInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
    Booking?: BookingUpdateManyWithoutUserNestedInput
    Response?: ResponseUpdateManyWithoutUserNestedInput
    Anketa?: AnketaUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
    anketaId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    Booking?: BookingUncheckedUpdateManyWithoutUserNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NewsUpsertWithoutCommentInput = {
    update: XOR<NewsUpdateWithoutCommentInput, NewsUncheckedUpdateWithoutCommentInput>
    create: XOR<NewsCreateWithoutCommentInput, NewsUncheckedCreateWithoutCommentInput>
  }

  export type NewsUpdateWithoutCommentInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    short_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ImageModel?: ImageModelUpdateManyWithoutNewsNestedInput
  }

  export type NewsUncheckedUpdateWithoutCommentInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    short_title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    update_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ImageModel?: ImageModelUncheckedUpdateManyWithoutNewsNestedInput
  }

  export type BookCreateWithoutResponseInput = {
    id?: bigint | number
    title: string
    author: string
    isbn: string
    description: string
    count: number
    rating: number
    price: number
    publishing_date: Date | string
    topic: string
    ImageModel?: ImageModelCreateNestedManyWithoutBookInput
    BookGenre?: BookGenreCreateNestedManyWithoutBookInput
    Booking?: BookingCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutResponseInput = {
    id?: bigint | number
    title: string
    author: string
    isbn: string
    description: string
    count: number
    rating: number
    price: number
    publishing_date: Date | string
    topic: string
    ImageModel?: ImageModelUncheckedCreateNestedManyWithoutBookInput
    BookGenre?: BookGenreUncheckedCreateNestedManyWithoutBookInput
    Booking?: BookingUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutResponseInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutResponseInput, BookUncheckedCreateWithoutResponseInput>
  }

  export type UserCreateWithoutResponseInput = {
    id?: bigint | number
    firstName: string
    lastName: string
    fatherName?: string | null
    phoneNumber: string
    password: string
    role?: Role
    avatar?: string | null
    IIN: string
    Booking?: BookingCreateNestedManyWithoutUserInput
    Anketa?: AnketaCreateNestedOneWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutResponseInput = {
    id?: bigint | number
    firstName: string
    lastName: string
    fatherName?: string | null
    phoneNumber: string
    password: string
    role?: Role
    avatar?: string | null
    IIN: string
    anketaId?: bigint | number | null
    Booking?: BookingUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutResponseInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResponseInput, UserUncheckedCreateWithoutResponseInput>
  }

  export type BookUpsertWithoutResponseInput = {
    update: XOR<BookUpdateWithoutResponseInput, BookUncheckedUpdateWithoutResponseInput>
    create: XOR<BookCreateWithoutResponseInput, BookUncheckedCreateWithoutResponseInput>
  }

  export type BookUpdateWithoutResponseInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    publishing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    ImageModel?: ImageModelUpdateManyWithoutBookNestedInput
    BookGenre?: BookGenreUpdateManyWithoutBookNestedInput
    Booking?: BookingUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutResponseInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    publishing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    ImageModel?: ImageModelUncheckedUpdateManyWithoutBookNestedInput
    BookGenre?: BookGenreUncheckedUpdateManyWithoutBookNestedInput
    Booking?: BookingUncheckedUpdateManyWithoutBookNestedInput
  }

  export type UserUpsertWithoutResponseInput = {
    update: XOR<UserUpdateWithoutResponseInput, UserUncheckedUpdateWithoutResponseInput>
    create: XOR<UserCreateWithoutResponseInput, UserUncheckedCreateWithoutResponseInput>
  }

  export type UserUpdateWithoutResponseInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
    Booking?: BookingUpdateManyWithoutUserNestedInput
    Anketa?: AnketaUpdateOneWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutResponseInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
    anketaId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    Booking?: BookingUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookCreateWithoutBookingInput = {
    id?: bigint | number
    title: string
    author: string
    isbn: string
    description: string
    count: number
    rating: number
    price: number
    publishing_date: Date | string
    topic: string
    ImageModel?: ImageModelCreateNestedManyWithoutBookInput
    BookGenre?: BookGenreCreateNestedManyWithoutBookInput
    Response?: ResponseCreateNestedManyWithoutBookInput
  }

  export type BookUncheckedCreateWithoutBookingInput = {
    id?: bigint | number
    title: string
    author: string
    isbn: string
    description: string
    count: number
    rating: number
    price: number
    publishing_date: Date | string
    topic: string
    ImageModel?: ImageModelUncheckedCreateNestedManyWithoutBookInput
    BookGenre?: BookGenreUncheckedCreateNestedManyWithoutBookInput
    Response?: ResponseUncheckedCreateNestedManyWithoutBookInput
  }

  export type BookCreateOrConnectWithoutBookingInput = {
    where: BookWhereUniqueInput
    create: XOR<BookCreateWithoutBookingInput, BookUncheckedCreateWithoutBookingInput>
  }

  export type UserCreateWithoutBookingInput = {
    id?: bigint | number
    firstName: string
    lastName: string
    fatherName?: string | null
    phoneNumber: string
    password: string
    role?: Role
    avatar?: string | null
    IIN: string
    Response?: ResponseCreateNestedManyWithoutUserInput
    Anketa?: AnketaCreateNestedOneWithoutUserInput
    Comment?: CommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookingInput = {
    id?: bigint | number
    firstName: string
    lastName: string
    fatherName?: string | null
    phoneNumber: string
    password: string
    role?: Role
    avatar?: string | null
    IIN: string
    anketaId?: bigint | number | null
    Response?: ResponseUncheckedCreateNestedManyWithoutUserInput
    Comment?: CommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookingInput, UserUncheckedCreateWithoutBookingInput>
  }

  export type BookUpsertWithoutBookingInput = {
    update: XOR<BookUpdateWithoutBookingInput, BookUncheckedUpdateWithoutBookingInput>
    create: XOR<BookCreateWithoutBookingInput, BookUncheckedCreateWithoutBookingInput>
  }

  export type BookUpdateWithoutBookingInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    publishing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    ImageModel?: ImageModelUpdateManyWithoutBookNestedInput
    BookGenre?: BookGenreUpdateManyWithoutBookNestedInput
    Response?: ResponseUpdateManyWithoutBookNestedInput
  }

  export type BookUncheckedUpdateWithoutBookingInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    title?: StringFieldUpdateOperationsInput | string
    author?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    count?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    publishing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    ImageModel?: ImageModelUncheckedUpdateManyWithoutBookNestedInput
    BookGenre?: BookGenreUncheckedUpdateManyWithoutBookNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutBookNestedInput
  }

  export type UserUpsertWithoutBookingInput = {
    update: XOR<UserUpdateWithoutBookingInput, UserUncheckedUpdateWithoutBookingInput>
    create: XOR<UserCreateWithoutBookingInput, UserUncheckedCreateWithoutBookingInput>
  }

  export type UserUpdateWithoutBookingInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
    Response?: ResponseUpdateManyWithoutUserNestedInput
    Anketa?: AnketaUpdateOneWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookingInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
    anketaId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    Response?: ResponseUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookingCreateManyUserInput = {
    id?: bigint | number
    received_date: Date | string
    expiration_date: Date | string
    return_date: Date | string
    bookId: bigint | number
    isExtend?: boolean
    isExtendApproved?: boolean
  }

  export type ResponseCreateManyUserInput = {
    id?: bigint | number
    bookId: bigint | number
  }

  export type CommentCreateManyUserInput = {
    id?: bigint | number
    message: string
    newsId: bigint | number
  }

  export type BookingUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    isExtend?: BoolFieldUpdateOperationsInput | boolean
    isExtendApproved?: BoolFieldUpdateOperationsInput | boolean
    Book?: BookUpdateOneRequiredWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bookId?: BigIntFieldUpdateOperationsInput | bigint | number
    isExtend?: BoolFieldUpdateOperationsInput | boolean
    isExtendApproved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BookingUncheckedUpdateManyWithoutBookingInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    bookId?: BigIntFieldUpdateOperationsInput | bigint | number
    isExtend?: BoolFieldUpdateOperationsInput | boolean
    isExtendApproved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResponseUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Book?: BookUpdateOneRequiredWithoutResponseNestedInput
  }

  export type ResponseUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    bookId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ResponseUncheckedUpdateManyWithoutResponseInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    bookId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CommentUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: StringFieldUpdateOperationsInput | string
    News?: NewsUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: StringFieldUpdateOperationsInput | string
    newsId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CommentUncheckedUpdateManyWithoutCommentInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: StringFieldUpdateOperationsInput | string
    newsId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type UserCreateManyAnketaInput = {
    id?: bigint | number
    firstName: string
    lastName: string
    fatherName?: string | null
    phoneNumber: string
    password: string
    role?: Role
    avatar?: string | null
    IIN: string
  }

  export type UserUpdateWithoutAnketaInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
    Booking?: BookingUpdateManyWithoutUserNestedInput
    Response?: ResponseUpdateManyWithoutUserNestedInput
    Comment?: CommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAnketaInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
    Booking?: BookingUncheckedUpdateManyWithoutUserNestedInput
    Response?: ResponseUncheckedUpdateManyWithoutUserNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    fatherName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    IIN?: StringFieldUpdateOperationsInput | string
  }

  export type ImageModelCreateManyBookInput = {
    id?: bigint | number
    link: string
    newsId?: bigint | number | null
  }

  export type BookGenreCreateManyBookInput = {
    id?: bigint | number
    genreId: bigint | number
  }

  export type BookingCreateManyBookInput = {
    id?: bigint | number
    received_date: Date | string
    expiration_date: Date | string
    return_date: Date | string
    userId: bigint | number
    isExtend?: boolean
    isExtendApproved?: boolean
  }

  export type ResponseCreateManyBookInput = {
    id?: bigint | number
    userId: bigint | number
  }

  export type ImageModelUpdateWithoutBookInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    link?: StringFieldUpdateOperationsInput | string
    News?: NewsUpdateOneWithoutImageModelNestedInput
  }

  export type ImageModelUncheckedUpdateWithoutBookInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    link?: StringFieldUpdateOperationsInput | string
    newsId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ImageModelUncheckedUpdateManyWithoutImageModelInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    link?: StringFieldUpdateOperationsInput | string
    newsId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type BookGenreUpdateWithoutBookInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Genre?: GenreUpdateOneRequiredWithoutBookGenreNestedInput
  }

  export type BookGenreUncheckedUpdateWithoutBookInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    genreId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type BookGenreUncheckedUpdateManyWithoutBookGenreInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    genreId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type BookingUpdateWithoutBookInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    isExtend?: BoolFieldUpdateOperationsInput | boolean
    isExtendApproved?: BoolFieldUpdateOperationsInput | boolean
    User?: UserUpdateOneRequiredWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutBookInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    received_date?: DateTimeFieldUpdateOperationsInput | Date | string
    expiration_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    isExtend?: BoolFieldUpdateOperationsInput | boolean
    isExtendApproved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResponseUpdateWithoutBookInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    User?: UserUpdateOneRequiredWithoutResponseNestedInput
  }

  export type ResponseUncheckedUpdateWithoutBookInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type BookGenreCreateManyGenreInput = {
    id?: bigint | number
    bookId: bigint | number
  }

  export type BookGenreUpdateWithoutGenreInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    Book?: BookUpdateOneRequiredWithoutBookGenreNestedInput
  }

  export type BookGenreUncheckedUpdateWithoutGenreInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    bookId?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ImageModelCreateManyNewsInput = {
    id?: bigint | number
    link: string
    bookId?: bigint | number | null
  }

  export type CommentCreateManyNewsInput = {
    id?: bigint | number
    message: string
    userId: bigint | number
  }

  export type ImageModelUpdateWithoutNewsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    link?: StringFieldUpdateOperationsInput | string
    Book?: BookUpdateOneWithoutImageModelNestedInput
  }

  export type ImageModelUncheckedUpdateWithoutNewsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    link?: StringFieldUpdateOperationsInput | string
    bookId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type CommentUpdateWithoutNewsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneRequiredWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutNewsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    message?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}